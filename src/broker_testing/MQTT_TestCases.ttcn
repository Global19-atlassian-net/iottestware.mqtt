/*******************************************************************************
* Copyright (c) 2018 Relayr GmbH
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Alexander Kaiser
*   Sascha Kretzschmann
*******************************************************************************/
module MQTT_TestCases {

// old MQTT Broker Testing modules
import from MQTT_TestSystem all;
import from MQTT_TypesAndValues all;
import from MQTT_Functions all;
import from MQTT_Templates all;
import from MQTT_Testcase_Functions all;

// MUST NOT be imported here... refactoring required with config_02
import from MQTT_Pixits all;
import from UTF8_Helper all;
import from Random_Helper all;

// MQTT TS Framework
import from MQTT_TestSystem_Common all;
import from MQTT_TypesAndValues_Common all;
import from MQTT_Functions_SetUp all;
import from MQTT_Functions_Network all;

// MQTT 3.1.1 Protocol Modules
import from MQTT_v3_1_1_Types all;


group connectGroup
{

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_001();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_002();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_003();
    }
    f_cleanUp();
  }


  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_004();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_005();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_006();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_007() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_007();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_008() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_008();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_009() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_009();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_010() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_010();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_011() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_011();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_012() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_012();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_013() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_013();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_014() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_014();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_015() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_015();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_016() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_016();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_017() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_017();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_018() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_018();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_019() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_019();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_020() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_020();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_021() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_021();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_022() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_022();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_023() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_023();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_024() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_024();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_025() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_025();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_026() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_026();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_027() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_027();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_028() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_028();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_029() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_029();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_030() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var BooleanReturnType v_init_client1, v_init_client2;

    var MQTT_Client_MTC client_1 := MQTT_Client_MTC.create("Client_1") alive;
    var MQTT_Client_MTC client_2 := MQTT_Client_MTC.create("Client_2") alive;

    // Note: here we cannot use f_init_client_system...
    map(client_1:MQTT_PCO, system:mqtt_client_1)
    map(client_2:MQTT_PCO, system:mqtt_client_2)

    // ...because both clients must use the same credentials from PIXITS
    client_1.start(f_init_client(0)); // <- idx = 0
    client_2.start(f_init_client(0)); // <- idx = 0

    // wait until clients initialized and store the init state
    client_1.done(BooleanReturnType : ?) -> value v_init_client1
    client_2.done(BooleanReturnType : ?) -> value v_init_client2

    if(v_init_client1 and v_init_client2) // only if both initialized correctly
    {
      f_TC_MQTT_BROKER_CONNECT_030(client_1, client_2)
    }

    f_clear_client_system(client_1, client_2)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_031() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_CONNECT_031()
    }

    f_clear_client()

    unmap(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNECT_032() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0) and f_ipl4_connect())
    {
      f_TC_MQTT_BROKER_CONNECT_032()
    }

    f_clear_client()

    unmap(self:MQTT_PCO, system:MQTT_PCO)
  }
} // connectGroup

group connackGroup
{
  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_001();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_002();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_003();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_004();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_005();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_006();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_007() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_007();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_008() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_008();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_009() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_009();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_CONNACK_010() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_010();
    }
    f_cleanUp();
  }
} // connackGroup

group publishGroup
{
  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_001();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_002();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_003();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_004();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_005();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_006();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_007() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_007();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_008() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_PUBLISH_008()
    }

    f_clear_client()

    map(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
 @remark It should be impossible for Brokers to pass this test!
  *         As the Packet Identifier is optional, it will be interpreted as part of payload coming after the topic_name.  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_009() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_PUBLISH_009()
    }

    f_clear_client()

    map(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_010() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_010();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_011() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_011();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBLISH_012() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_PUBLISH_012()
    }

    f_clear_client()

    map(self:MQTT_PCO, system:MQTT_PCO)
  }
} // publishGroup

group publishResponseGroup
{
  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBACK_001() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_PUBACK_001(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
 @reference [MQTT-4.6.0-2]
  */
  testcase TC_MQTT_BROKER_PUBACK_002() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_PUBACK_002()
    }

    f_clear_client()

    unmap(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBREC_001() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_PUBREC_001(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  * @purpose  *
  */
  testcase TC_MQTT_BROKER_PUBREC_002() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_PUBREC_002()
    }

    f_clear_client()

    unmap(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBREL_001() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_PUBREL_001()
    }

    f_clear_client()

    unmap(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBREL_002() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_PUBREL_002(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_PUBCOMP_001() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_PUBCOMP_001(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }
}

group subscribeGroup
{
  /*
 packet are invalid
  *  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_001();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_002();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_003();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_004();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_005();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_006();
    }
    f_cleanUp();
  }

  /*
 QoS in the payload MUST be set to 0.
  *  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_007() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_007();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_008() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_008();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_009() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_009()
    }

    f_clear_client()

    map(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_010() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_010()
    }

    f_clear_client()

    map(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_011() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_011()
    }

    f_clear_client()

    map(self:MQTT_PCO, system:MQTT_PCO)
  }
} // subscribeGroup

group subackGroup
{
  /*
 responds with SUBACK
  *
  */
  testcase TC_MQTT_BROKER_SUBACK_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_001();
    }
    f_cleanUp();
  }

  /*
 packet identifier
  *  *
  */
  testcase TC_MQTT_BROKER_SUBACK_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_002();
    }
    f_cleanUp();
  }


  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBACK_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_003();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBACK_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_004();
    }
    f_cleanUp();
  }


  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBACK_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_005();
    }
    f_cleanUp();
  }


  /*
  *
  */
  testcase TC_MQTT_BROKER_SUBACK_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_006();
    }
    f_cleanUp();
  }
} // subackGroup

group unsubscribeGroup
{
  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_001();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_002();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_003();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_004();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_005();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_006();
    }
    f_cleanUp();
  }
} // unsubscribeGroup

group unsubackGroup
{
  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBACK_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBACK_001();
    }
    f_cleanUp();
  }

  /*
 The UNSUBACK Control Packet MUST have the same Packet Identifier as the UNSUBSCRIBE Control Packet
  *  *
  */
  testcase TC_MQTT_BROKER_UNSUBACK_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBACK_002();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBACK_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBACK_003();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_UNSUBACK_004() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_UNSUBACK_004()
    }

    f_clear_client()

    unmap(self:MQTT_PCO, system:MQTT_PCO)
  }
} // unsubackGroup

group pingreqGroup {
  /*
  *
  */
  testcase TC_MQTT_BROKER_PINGREQ_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PINGREQ_001();
    }
    f_cleanUp();
  }
} // pingreqGroup

group pingrespGroup {

  /*
  *
  */
  testcase TC_MQTT_BROKER_PINGRESP_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PINGRESP_001();
    }
    f_cleanUp();
  }
} // pingrespGroup

group disconnectGroup {
  /*
  *
  */
  testcase TC_MQTT_BROKER_DISCONNECT_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_DISCONNECT_001();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_DISCONNECT_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_DISCONNECT_002();
    }
    f_cleanUp();
  }
} // disconnectGroup

group protocolFeaturesGroup {

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_REMLEN_001() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      var integer v_payload_length := 10
      var octetstring v_payload := f_test_long_payload(PX_PAYLOAD_DATA_FILE, v_payload_length)
      var float v_timeout := PX_MAX_RESPONSE_TIME
      f_TC_MQTT_BROKER_FEAT_REMLEN(publisher, subscriber, v_timeout, v_payload)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_REMLEN_002() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      var integer v_payload_length := 128
      var octetstring v_payload := f_test_long_payload(PX_PAYLOAD_DATA_FILE, v_payload_length)
      var float v_timeout := PX_MAX_RESPONSE_TIME
      f_TC_MQTT_BROKER_FEAT_REMLEN(publisher, subscriber, v_timeout, v_payload)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_REMLEN_003() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      var integer v_payload_length := 16384
      var octetstring v_payload := f_test_long_payload(PX_PAYLOAD_DATA_FILE, v_payload_length)
      var float v_timeout := PX_MAX_RESPONSE_TIME * 2.0
      f_TC_MQTT_BROKER_FEAT_REMLEN(publisher, subscriber, v_timeout, v_payload)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_REMLEN_004() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      var integer v_payload_length := 2097152
      var octetstring v_payload := f_test_long_payload(PX_PAYLOAD_DATA_FILE, v_payload_length)
      var float v_timeout := PX_MAX_RESPONSE_TIME * 4.0
      f_TC_MQTT_BROKER_FEAT_REMLEN(publisher, subscriber, v_timeout, v_payload)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_KEEPALIVE_001() runs on MQTT_Client_MTC
  {
    map(self:MQTT_PCO, system:MQTT_PCO)

    if(f_init_client(0))
    {
      f_TC_MQTT_BROKER_FEAT_KEEPALIVE_001()
    }

    f_clear_client()

    unmap(self:MQTT_PCO, system:MQTT_PCO)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_RTND_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_FEAT_RTND_001();
    }
    f_cleanUp();
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_RTND_002() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_RTND_002(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_RTND_003() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_RTND_003(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
          with a subscription matching the topic name. (Additionally any existing retained message with the same topic name MUST be removed and any
  *          future subscribers for the topic will not receive a retained message)"
  *  *
  */
  testcase TC_MQTT_BROKER_FEAT_RTND_004() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_RTND_004(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
          with a subscription matching the topic name). Additionally any existing retained message with the same topic name MUST be removed and any
  *          future subscribers for the topic will not receive a retained message. A zero byte retained message MUST NOT be stored as a retained message on the Server."
  *  *
  */
  testcase TC_MQTT_BROKER_FEAT_RTND_005() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_RTND_005(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
          MUST NOT remove or replace any existing retained message."
  *  *
  */
  testcase TC_MQTT_BROKER_FEAT_RTND_006() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_RTND_006(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_RTND_007() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_RTND_007(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_LWT_001() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC client_lwt := MQTT_Client_MTC.create("Client_LWT") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(client_lwt, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_LWT_001(client_lwt, subscriber)
    }

    f_clear_client_system(client_lwt, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_LWT_002() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC client_lwt := MQTT_Client_MTC.create("Client_LWT") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(client_lwt, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_LWT_002(client_lwt, subscriber)
    }

    f_clear_client_system(client_lwt, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_LWT_003() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC client_lwt := MQTT_Client_MTC.create("Client_LWT") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(client_lwt, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_LWT_003(client_lwt, subscriber)
    }

    f_clear_client_system(client_lwt, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_LWT_004() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC client_lwt := MQTT_Client_MTC.create("Client_LWT") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(client_lwt, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_LWT_004(client_lwt, subscriber)
    }

    f_clear_client_system(client_lwt, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_LWT_005() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC client_lwt := MQTT_Client_MTC.create("Client_LWT") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(client_lwt, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_LWT_005(client_lwt, subscriber)
    }

    f_clear_client_system(client_lwt, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_PUBSUB_001() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_PUBSUB_001(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_PUBSUB_002() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_PUBSUB_002(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_PUBSUB_003() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_PUBSUB_003(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_PUBSUB_004() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_PUBSUB_004(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_PUBSUB_005() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_PUBSUB_005(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_PUBSUB_006() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_PUBSUB_006(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_PUBSUB_007() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_PUBSUB_007(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_QOS_001() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_QOS_001(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_QOS_002() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_QOS_002(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_QOS_003() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_QOS_003(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_QOS_004() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_QOS_004(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }

  /*
  *
  */
  testcase TC_MQTT_BROKER_FEAT_QOS_005() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher := MQTT_Client_MTC.create("Publisher") alive;
    var MQTT_Client_MTC subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    if(f_init_client_system(publisher, subscriber))
    {
      f_TC_MQTT_BROKER_FEAT_QOS_005(publisher, subscriber)
    }

    f_clear_client_system(publisher, subscriber)
  }
} // protocolFeaturesGroup

group cveGroup {
  /*
  *
  */
  testcase TC_MQTT_BROKER_SEC_CVE_001() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC attacker := MQTT_Client_MTC.create("Attacker") alive;
    var MQTT_Client_MTC probe := MQTT_Client_MTC.create("Probe") alive;

    if(f_init_client_system(attacker, probe))
    {
      f_TC_MQTT_BROKER_SEC_CVE_001(attacker, probe)
    }

    f_clear_client_system(attacker, probe)
  }

  /*
  * https://mosquitto.org/blog/2018/09/security-advisory-cve-2018-12543/
  */
  testcase TC_MQTT_BROKER_SEC_CVE_002() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC attacker := MQTT_Client_MTC.create("Attacker") alive;
    var MQTT_Client_MTC probe := MQTT_Client_MTC.create("Probe") alive;

    if(f_init_client_system(attacker, probe))
    {
      f_TC_MQTT_BROKER_SEC_CVE_002(attacker, probe)
    }

    f_clear_client_system(attacker, probe)
  }

  /*
  * https://bugs.eclipse.org/bugs/show_bug.cgi?id=551160
  */
  testcase TC_MQTT_BROKER_SEC_CVE_003() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC attacker := MQTT_Client_MTC.create("Attacker") alive;
    var MQTT_Client_MTC probe := MQTT_Client_MTC.create("Probe") alive;

    if(f_init_client_system(attacker, probe))
    {
      f_TC_MQTT_BROKER_SEC_CVE_003(attacker, probe)
    }

    f_clear_client_system(attacker, probe)
  }

  /*
  * https://mosquitto.org/blog/2018/09/security-advisory-cve-2018-12543/
  * Note: does not work yet!
  *
  testcase TC_MQTT_BROKER_SEC_CVE_xxx() runs on MQTT_Client_MTC system MQTT_Client_SecurityTestSystem
  {
    var MQTT_Client_MTC attacker_0 := MQTT_Client_MTC.create("Attacker_0") alive;
    var MQTT_Client_MTC attacker_1 := MQTT_Client_MTC.create("Attacker_1") alive;
    var MQTT_Client_MTC attacker_2 := MQTT_Client_MTC.create("Attacker_2") alive;
    var MQTT_Client_MTC attacker_3 := MQTT_Client_MTC.create("Attacker_3") alive;
    var MQTT_Client_MTC probe := MQTT_Client_MTC.create("Probe") alive;

    var MQTT_Client_List v_list := {attacker_0, attacker_1, attacker_2, attacker_3}

    if(f_init_client_security_system(v_list, probe))
    {
      f_TC_MQTT_BROKER_SEC_CVE_003(v_list, probe)
    }

    f_clear_client_security_system(v_list, probe)
  }*/
} // cveGroup

} // module MQTT_TestCases
