/*******************************************************************************
* Copyright (c) 2018 Relayr GmbH
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Alexander Kaiser
*   Sascha Kretzschmann
*******************************************************************************/
module MQTT_TestCases {

// old MQTT Broker Testing modules
import from MQTT_TestSystem all;
import from MQTT_TypesAndValues all;
import from MQTT_Functions all;
import from MQTT_Templates all;
import from MQTT_Testcase_Functions all;

// MUST NOT be imported here... refactoring required with config_02
import from MQTT_Pixits all;
import from UTF8_Helper all;

// MQTT TS Framework
import from MQTT_TestSystem_Common all;
import from MQTT_Functions_SetUp all;
import from MQTT_Functions_Network all;

// MQTT 3.1.1 Protocol Modules
import from MQTT_v3_1_1_Types all;

group connectGroup
{

  /*
  * @purpose The IUT MUST close the network connection if fixed header flags in CONNECT Control Packet are invalid
  *
  * @reference [MQTT-2.2.2-2], [MQTT-3.1.4-1], [MQTT-3.2.2-6]
  */
  testcase TC_MQTT_BROKER_CONNECT_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_001();
    }
    f_cleanUp();
  }

  /*
  * @purpose IF the Protocol Name is incorrect the IUT MAY disconnect the Client or
  * it MAY continue processing the CONNECT Control Packet
  *
  * @reference [MQTT-3.1.2-1]
  */
  testcase TC_MQTT_BROKER_CONNECT_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_002();
    }
    f_cleanUp();
  }

  /*
  * @purpose The IUT MUST respond to protocol levels which it supports with return code 0x00
  *
  * @reference [MQTT-3.1.2-2], [MQTT-3.1.4-4]
  */
  testcase TC_MQTT_BROKER_CONNECT_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_003();
    }
    f_cleanUp();
  }


  /*
  * @purpose The IUT MUST validate that the reserved flag in the CONNECT Control Packet is set to zero and disconnect the client
  * if it is not zero
  *
  * @reference [MQTT-3.1.2-3], [MQTT-3.1.4-1], [MQTT-3.2.2-6]
  */
  testcase TC_MQTT_BROKER_CONNECT_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_004();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the will_flag is set to 1, the will_qos and will_retain fields in the connect flags
  * will be used by the IUT, and the will_topic and will_message fields MUST be present in the payload
  *
  * @reference [MQTT-3.1.2-9], [MQTT-3.1.4-1], [MQTT-3.2.2-6]
  */
  testcase TC_MQTT_BROKER_CONNECT_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_005();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the will_flag is set to 0 the will_qos and will_retain fields in the connect flags
  * MUST be set to zero and the will_topic and will_message fields MUST NOT be present in the payload
  *
  * @reference [MQTT-3.1.2-11], [MQTT-3.1.4-1], [MQTT-3.2.2-6]
  */
  testcase TC_MQTT_BROKER_CONNECT_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_006();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the will_flag is set to 0, then the will_qos MUST be set to 0
  *
  * @reference [MQTT-3.1.2-13], [MQTT-3.1.4-1], [MQTT-3.2.2-6]
  */
  testcase TC_MQTT_BROKER_CONNECT_007() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_007();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the will_flag is set to 1, the value of will_qos can be 0, 1 or 2.
  * It MUST NOT be 3
  *
  * @reference [MQTT-3.1.2-14], [MQTT-3.1.4-1], [MQTT-3.2.2-6]
  */
  testcase TC_MQTT_BROKER_CONNECT_008() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_008();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the will_flag is set to 1, the value of will_qos ca be 0, 1 or 2
  *
  * @references [MQTT-3.1.2-14], [MQTT-3.1.4-4]
  */
  testcase TC_MQTT_BROKER_CONNECT_009() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_009();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the will_flag is set to 0, then the will_retain flag MUST be set to 0
  *
  * @reference [MQTT-3.1.2-15], [MQTT-3.1.4-1], [MQTT-3.2.2-6]
  */
  testcase TC_MQTT_BROKER_CONNECT_010() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_010();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the will_flag is set to 0, then the will_retain flag MUST be set to 0
  *
  * @reference [MQTT-3.1.2-15], [MQTT-3.1.4-4]
  */
  testcase TC_MQTT_BROKER_CONNECT_011() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_011();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the Username flag is set to 0, the Password flag MUST be set to 0
  *
  * @reference [MQTT-3.1.2-22]
  */
  testcase TC_MQTT_BROKER_CONNECT_012() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_012();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the user name flag is set to 0, a user name MUST NOT be present in the payload
  *
  * @reference [MQTT-3.1.2-18]
  */
  testcase TC_MQTT_BROKER_CONNECT_013() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_013();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the user name flag is set to 1, a user name MUST be present in the payload
  *
  * @reference [MQTT-3.1.2-19]
  */
  testcase TC_MQTT_BROKER_CONNECT_014() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_014();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the password flag ist set to 0, a password MUST NOT be present in the payload
  *
  * @reference [MQTT-3.1.2-20]
  */
  testcase TC_MQTT_BROKER_CONNECT_015() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_015();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the password flag is set to 1, a user password MUST be present in the payload
  *
  * @reference [MQTT-3.1.2-21]
  */
  testcase TC_MQTT_BROKER_CONNECT_016() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_016();
    }
    f_cleanUp();
  }

  /*
  * @purpose It IUT MUST allow ClientIDs wich are between 1 and 23 UTF-8 encoded bytes in length
  *
  * @reference [MQTT-3.1.3-5]
  */
  testcase TC_MQTT_BROKER_CONNECT_017() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_017();
    }
    f_cleanUp();
  }

  /*
  * @purpose It IUT MUST allow ClientIDs wich are between 1 and 23 UTF-8 encoded bytes in length
  *
  * @reference [MQTT-3.1.3-5]
  */
  testcase TC_MQTT_BROKER_CONNECT_018() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_018();
    }
    f_cleanUp();
  }

  /*
  * @purpose The IUT MAY allow a client to supply a client identifier that has a length of zero bytes,
  * however if it does so the IUT MUST treat this as a special case and assign a unique client identifier
  * to that client
  *
  * @reference [MQTT-3.1.3-6], [MQTT-3.1.3-7], [MQTT-3.1.4-4]
  */
  testcase TC_MQTT_BROKER_CONNECT_019() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_019();
    }
    f_cleanUp();
  }

  /*
  * @purpose The ClientId MUST be a well-formed UTF-8 encoded string
  *
  * @reference [MQTT-1.5.3-1]
  */
  testcase TC_MQTT_BROKER_CONNECT_020() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_020();
    }
    f_cleanUp();
  }

  /*
  * @purpose The ClientId MUST be a well-formed UTF-8 encoded string
  *
  * @reference [MQTT-1.5.3-2]
  */
  testcase TC_MQTT_BROKER_CONNECT_021() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_021();
    }
    f_cleanUp();
  }

  /*
  * @purpose The Will Topic MUST be a well-formed UTF-8 encoded string
  *
  * @reference [MQTT-1.5.3-1], [MQTT-3.1.3-10]
  */
  testcase TC_MQTT_BROKER_CONNECT_022() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_022();
    }
    f_cleanUp();
  }

  /*
  * @purpose The Will Topic MUST be a well-formed UTF-8 encoded string
  *
  * @reference [MQTT-1.5.3-2], [MQTT-3.1.3-10]
  */
  testcase TC_MQTT_BROKER_CONNECT_023() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_023();
    }
    f_cleanUp();
  }

  /*
  * @purpose The user name MUST be a well-formed UTF-8 encoded string
  *
  * @reference [MQTT-1.5.3-1], [MQTT-3.1.3-11]
  */
  testcase TC_MQTT_BROKER_CONNECT_024() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_024();
    }
    f_cleanUp();
  }

  /*
  * @purpose The user name MUST be a well-formed UTF-8 encoded string
  *
  * @reference [MQTT-1.5.3-2], [MQTT-3.1.3-11]
  */
  testcase TC_MQTT_BROKER_CONNECT_025() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNECT_025();
    }
    f_cleanUp();
  }
} // connectGroup

group connackGroup
{
  /*
  * @purpose The IUT accepts only valid fixed header flags for CONNECT Control Packet and
  * responds with CONNACK
  *
  * @reference [MQTT-2.2.2-1], [MQTT-3.1.4-4]
  */
  testcase TC_MQTT_BROKER_CONNACK_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_001();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the IUT accepts a connection with clean session set to 1, the IUT MUST set session present to 0
  * in the CONNACK packet in addition to setting a zero-return code
  *
  * @reference [MQTT-3.2.2-1]
  */
  testcase TC_MQTT_BROKER_CONNACK_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_002();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the IUT has stored session state, it MUST set session present flag to 1 in the CONNACK Control Packet
  *
  * @reference [MQTT-3.2.2-2]
  */
  testcase TC_MQTT_BROKER_CONNACK_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_003();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the IUT does not have a stored session state, it MUST set session present flag to 0
  * in the CONNACK control packet
  *
  * @reference [MQTT-3.2.2-3]
  */
  testcase TC_MQTT_BROKER_CONNACK_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_004();
    }
    f_cleanUp();
  }

  /*
  * @purpose The IUT MUST respond to protocol levels which it does not support with return code 0x01
  *
  * @reference [MQTT-3.1.2-2], [MQTT-3.2.2-4], [MQTT-3.2.2-5]
  */
  testcase TC_MQTT_BROKER_CONNACK_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_005();
    }
    f_cleanUp();
  }

  /*
  * @purpose If the client supplies a zero-byte client identifier with clean session set to 0,
  * the IUT MUST respond to the CONNECT with a CONNACK and return code 0x02 and then close the
  * network connection.
  *
  * @reference [MQTT-3.1.3-8], [MQTT-3.1.3-9], [MQTT-3.2.2-4], [MQTT-3.2.2-5]
  */
  testcase TC_MQTT_BROKER_CONNACK_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_006();
    }
    f_cleanUp();
  }

  /*
  * @purpose The data in the username or password is malfromed
  *
  * @reference [MQTT-3.2.2-4], [MQTT-3.2.2-5]
  */
  testcase TC_MQTT_BROKER_CONNACK_007() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_007();
    }
    f_cleanUp();
  }

  /*
  * @purpose The client is not authorized to connect. Username is invalid
  *
  * @reference [MQTT-3.2.2-4], [MQTT-3.2.2-5]
  */
  testcase TC_MQTT_BROKER_CONNACK_008() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_008();
    }
    f_cleanUp();
  }

  /*
  * @purpose The client is not authorized to connect. Password is invalid
  *
  * @reference [MQTT-3.2.2-4], [MQTT-3.2.2-5]
  */
  testcase TC_MQTT_BROKER_CONNACK_009() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_009();
    }
    f_cleanUp();
  }

  /*
   * @purpose The Network Connection has been made but the MQTT service is unavailable
   *
   * @reference [MQTT-3.2.2-4], [MQTT-3.2.2-5]
   */
  testcase TC_MQTT_BROKER_CONNACK_010() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_CONNACK_010();
    }
    f_cleanUp();
  }
} // connackGroup

group publishGroup
{
  /*
  * @purpose The DUP flag MUST be set to 0 for all QoS 0 messages
  *
  * @reference [MQTT-3.3.1-2]
  */
  testcase TC_MQTT_BROKER_PUBLISH_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_001();
    }
    f_cleanUp();
  }

  /*
  * @purpose A PUBLISH packet MUST NOT have both QoS bits set to 1. QoS level corresponding to '11'B is considered invalid
  *
  * @reference [MQTT-2.2.2-1], [MQTT-3.3.1-4]
  */
  testcase TC_MQTT_BROKER_PUBLISH_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_002();
    }
    f_cleanUp();
  }

  /*
  * @purpose The Topic Name MUST be a UTF-8 encoded string and be present as the first field in the variable header
  *
  * @reference [MQTT-3.3.2-1]
  */
  testcase TC_MQTT_BROKER_PUBLISH_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_003();
    }
    f_cleanUp();
  }

  /*
  * @purpose The Topic Name in the PUBLISH Packet MUST NOT contain wildcard characters
  *
  * @reference [MQTT-3.3.2-2]
  */
  testcase TC_MQTT_BROKER_PUBLISH_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_004();
    }
    f_cleanUp();
  }

  /*
  * @purpose In case of QoS = 1 any PUBLISH Packet MUST contain a non-zero 16-bit Packet Identifier
  *
  * @reference [MQTT-2.3.1-1]
  */
  testcase TC_MQTT_BROKER_PUBLISH_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_005();
    }
    f_cleanUp();
  }

  /*
  * @purpose In case of QoS = 2 any PUBLISH Packet MUST contain a non-zero 16-bit Packet Identifier
  *
  * @reference [MQTT-2.3.1-1]
  */
  testcase TC_MQTT_BROKER_PUBLISH_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PUBLISH_006();
    }
    f_cleanUp();
  }
} // publishGroup

group subscribeGroup
{
  /*
  * @purpose The IUT MUST close the network connection if the fixed header flags in the SUBSCRIBE control
  * packet are invalid
  *
  * @reference [MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.8.1-1]
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_001();
    }
    f_cleanUp();
  }

  /*
  * @purpose SUBSCRIBE Control Packet MUST contain a non-zero 16-bit Packet Identifier
  *
  * @reference [MQTT-2.3.1-1]
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_002();
    }
    f_cleanUp();
  }

  /*
  * @purpose The Topic Filters in a Subscribe packet payload MUST be UTF-8 encoded strings. This data MUST NOT include encodings of code points between U+D800 and U+DFFF
  *
  * @reference [MQTT-1.5.3-1], [MQTT-3.8.3-1]
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_003();
    }
    f_cleanUp();
  }

  /*
  * @purpose The Topic Filters in a Subscribe packet payload MUST be UTF-8 encoded strings. A UTF-8 encoded string MUST NOT include an encoding of the null character U+0000.
  *
  * @reference [MQTT-1.5.3-2], [MQTT-3.8.3-1]
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_004();
    }
    f_cleanUp();
  }

  /*
  * @purpose The payload of a SUBSCRIBE control packet MUST contain at least one Topic Filter / QoS pair
  *
  * @reference [MQTT-3.8.3-3], [MQTT-4.8.0-1]
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_005();
    }
    f_cleanUp();
  }

  /*
  * @purpose The upper 6 bits of the Requested QoS byte are reserved. Reserved bits for Requested
  * QoS in the payload MUST be set to 0.
  *
  * @reference [MQTT-3.8.3-4]
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_006();
    }
    f_cleanUp();
  }

  /*
  * @purpose The requested QoS in the payload MUST be 0, 1 or 2, it MUST NOT be 3
  *
  * @reference [MQTT-3.8.3-4]
  */
  testcase TC_MQTT_BROKER_SUBSCRIBE_007() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBSCRIBE_007();
    }
    f_cleanUp();
  }
} // subscribeGroup

group subackGroup
{
  /*
  * @purpose The IUT accepts only valid fixed header flags for SUBSCRIBE control packet and
  * responds with SUBACK
  *
  */
  testcase TC_MQTT_BROKER_SUBACK_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_001();
    }
    f_cleanUp();
  }

  /*
  * @purpose SUBSCRIBE control packet (in case where QoS > 0) MUST contain a non-zero 16-bit
  * packet identifier
  *
  * @reference [MQTT-2.3.1-1], [MQTT-2.3.1-7], [MQTT-3.8.4-1], [MQTT-3.8.4-2]
  */
  testcase TC_MQTT_BROKER_SUBACK_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_002();
    }
    f_cleanUp();
  }


  /*
  * @purpose SUBACK return codes other than 0x00, 0x01, 0x02 and 0x80 are reserved and MUST NOT be used
  *
  * @reference [MQTT-3.9.3-1], [MQTT-3.9.3-2]
  */
  testcase TC_MQTT_BROKER_SUBACK_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_003();
    }
    f_cleanUp();
  }

  /*
  * @purpose SUBACK return codes other than 0x00, 0x01, 0x02 and 0x80 are reserved and MUST NOT be used
  *
  * @reference [MQTT-3.9.3-1], [MQTT-3.9.3-2]
  */
  testcase TC_MQTT_BROKER_SUBACK_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_004();
    }
    f_cleanUp();
  }


  /*
  * @purpose SUBACK return codes other than 0x00, 0x01, 0x02 and 0x80 are reserved and MUST NOT be used
  *
  * @reference [MQTT-3.9.3-1], [MQTT-3.9.3-2]
  */
  testcase TC_MQTT_BROKER_SUBACK_005() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_005();
    }
    f_cleanUp();
  }


  /*
  * @purpose The IUT responds with return code 0x80 to indicate a denial of access to this topic filter
  *
  * @reference [MQTT-3.9.3-1], [MQTT-3.9.3-2]
  */
  testcase TC_MQTT_BROKER_SUBACK_006() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_SUBACK_006();
    }
    f_cleanUp();
  }
} // subackGroup

group unsubscribeGroup
{
  /*
  * @purpose The IUT closes the network connection if fixed header flags in UNSUBSCRIBE Control Packet are invalid
  *
  * @reference [MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.10.1-1]
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_001();
    }
    f_cleanUp();
  }

  /*
  * @purpose UNSUBSCRIBE Control Packet MUST contain a non-zero 16-bit Packet Identifier
  *
  * @reference [MQTT-2.3.1-1]
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_002();
    }
    f_cleanUp();
  }

  /*
  * @purpose The Topic Filters in an Unsubscribe packet payload MUST be UTF-8 encoded strings. This data MUST NOT include encodings of code points between U+D800 and U+DFFF
  *
  * @reference [MQTT-1.5.3-1], [MQTT-3.10.3-1]
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_003() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_003();
    }
    f_cleanUp();
  }


  /*
  * @purpose The payload of an UNSUBSCRIBE Control Packet MUST contain at least one Topic Filter
  *
  * @reference [MQTT-3.10.3-2]
  */
  testcase TC_MQTT_BROKER_UNSUBSCRIBE_004() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBSCRIBE_004();
    }
    f_cleanUp();
  }
} // unsubscribeGroup

group unsubackGroup
{
  /*
  * @purpose The IUT accepts only valid fixed header flags for UNSUBSCRIBE Control Packet and responds with UNSUBACK
  *
  * @reference [MQTT-2.2.2-1], [MQTT-3.10.1-1]
  */
  testcase TC_MQTT_BROKER_UNSUBACK_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBACK_001();
    }
    f_cleanUp();
  }

  /*
  * @purpose The IUT MUST respond to an UNSUBSCRIBE request by sending an UNSUBACK Control Packet.
  * The UNSUBACK Control Packet MUST have the same Packet Identifier as the UNSUBSCRIBE Control Packet
  *
  * @reference [MQTT-3.10.4-4], [MQTT-3.10.4-5]
  */
  testcase TC_MQTT_BROKER_UNSUBACK_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_UNSUBACK_002();
    }
    f_cleanUp();
  }
} // unsubackGroup

group pingreqGroup {
  /*
  * @purpose The IUT closes the network connection if fixed header flags in PINGREQ Control Packet are invalid
  *
  * @reference [MQTT-2.2.2-1], [MQTT-2.2.2-2]
  */
  testcase TC_MQTT_BROKER_PINGREQ_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PINGREQ_001();
    }
    f_cleanUp();
  }
} // pingreqGroup

group pingrespGroup {

  /*
  * @purpose The IUT accepts only valid fixed header flags for PINGREQ Control Packet and responds with a PINGRESP
  *
  * @reference [MQTT-2.2.2-1], [MQTT-3.12.4-1]
  */
  testcase TC_MQTT_BROKER_PINGRESP_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_PINGRESP_001();
    }
    f_cleanUp();
  }
} // pingrespGroup

group disconnectGroup {
  /*
  * @purpose The IUT MUST validate that reserved bits are set to zero and disconnect the Client if they are not zero.
  *
  * @reference [MQTT-2.2.2-1], [MQTT-3.14.1-1]
  */
  testcase TC_MQTT_BROKER_DISCONNECT_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_DISCONNECT_001();
    }
    f_cleanUp();
  }

  /*
  * @purpose The IUT MUST validate that reserved bits are set to zero and disconnect the Client if they are not zero.
  *
  * @reference [MQTT-2.2.2-1], [MQTT-3.14.1-1]
  */
  testcase TC_MQTT_BROKER_DISCONNECT_002() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_DISCONNECT_002();
    }
    f_cleanUp();
  }
} // disconnectGroup

group protocolFeaturesGroup {

  /*
  * @purpose Retained messages do not form part of the Session state in the IUT, they MUST NOT be deleted when the Session ends
  *
  * @reference [MQTT-3.1.2-7]
  */
  testcase TC_MQTT_BROKER_FEAT_RTND_001() runs on MQTT_Client
  {
    if(f_init())
    {
      f_TC_MQTT_BROKER_FEAT_RTND_001();
    }
    f_cleanUp();
  }


  testcase TC_MQTT_BROKER_FEAT_RTND_002() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher, subscriber;

    publisher := MQTT_Client_MTC.create("Publisher") alive;
    subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    map(publisher:MQTT_PCO, system:mqtt_client_1)
    map(subscriber:MQTT_PCO, system:mqtt_client_2)

    publisher.start(f_init_client(0));
    subscriber.start(f_init_client(1));

    all component.done

    if(all component.alive)
    {
      f_TC_MQTT_BROKER_FEAT_RTND_002(publisher, subscriber)
    }
    else
    {
      log("some client died during init!")
      setverdict(inconc, "Initialization failed: check your config")
    }

    publisher.start(f_ipl4_disconnect())
    subscriber.start(f_ipl4_disconnect())
    all component.done
    all component.kill

    unmap(publisher:MQTT_PCO, system:mqtt_client_1)
    unmap(subscriber:MQTT_PCO, system:mqtt_client_2)
  }

  testcase TC_MQTT_BROKER_FEAT_RTND_003() runs on MQTT_Client_MTC system MQTT_Client_TestSystem
  {
    var MQTT_Client_MTC publisher, subscriber;

    publisher := MQTT_Client_MTC.create("Publisher") alive;
    subscriber := MQTT_Client_MTC.create("Subscriber") alive;

    map(publisher:MQTT_PCO, system:mqtt_client_1)
    map(subscriber:MQTT_PCO, system:mqtt_client_2)

    publisher.start(f_init_client(0));
    subscriber.start(f_init_client(1));

    all component.done

    if(all component.alive)
    {
      f_TC_MQTT_BROKER_FEAT_RTND_003(publisher, subscriber)
    }
    else
    {
      log("some client died during init!")
      setverdict(inconc, "Initialization failed: check your config")
    }

    publisher.start(f_ipl4_disconnect())
    subscriber.start(f_ipl4_disconnect())
    all component.done
    all component.kill

    unmap(publisher:MQTT_PCO, system:mqtt_client_1)
    unmap(subscriber:MQTT_PCO, system:mqtt_client_2)
  }
} // protocolFeaturesGroup

} // module MQTT_TestCases
