/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html 
 *
 * Contributors:
 *   Alexander Kaiser
 *    Sascha Hackel
 *******************************************************************************/
module MQTTasp_PortType {

import from IPL4asp_PortType all;
import from IPL4asp_Types all;
import from MQTT_v3_1_1_Types all;
import from MQTT_Functions all;
import from MQTTasp_Types all;

//Dual faced port
type port MQTTasp_PT message {
  out charstring
  inout MQTTasp_Message
} with {
  extension "user IPL4asp_PT
  out(
  MQTTasp_Message -> ASP_SendTo   : function(f_enc_mqtt);
  charstring      -> ASP_Send     : function(f_enc_asp_send)
  )in(
  ASP_RecvFrom -> MQTTasp_Message  : function(f_dec_mqtt);
  ASP_Event    ->                    - : discard;
  ASP_ConnId_ReadyToRelease ->       - : discard
  )"
}

private function f_enc_mqtt(in MQTTasp_Message p_in, out ASP_SendTo p_out) return integer
{
  log("[TRPO](Ecndode MQTT message): ", p_in)
  var octetstring v_encoded := f_MQTT_enc(p_in.msg);
  v_encoded := f_adjustLength(f_calcRemLength(v_encoded));

  p_out.connId := p_in.conn.ipl4.id;
  p_out.remName := p_in.conn.ipl4.rem_name;
  p_out.remPort := p_in.conn.ipl4.rem_port;
  p_out.proto := {tcp := {}}    // TDOO: add proto to IPL4_Connection?
  p_out.msg := v_encoded;

  return 0;
  //} with {extension "prototype(fast)"}
} with {extension "prototype(backtrack)" }

private function f_dec_mqtt(in ASP_RecvFrom p_in, out MQTTasp_Message p_out) return integer
{
  log("[TRPO](Decode ASP_RecvFrom): ", p_in)

  var MQTT_v3_1_1_Message v_mqttMsg;
  v_mqttMsg := f_MQTT_decode(p_in.msg)

  log("[TRPO](Decoding Result): ", v_mqttMsg)
  if (ischosen(v_mqttMsg.msg)) {
    p_out.msg := v_mqttMsg;
    p_out.conn.ipl4.id := p_in.connId;
    p_out.conn.ipl4.rem_name := p_in.remName;
    p_out.conn.ipl4.rem_port := p_in.remPort;
    p_out.conn.ipl4.tcp_state := Connected
    p_out.conn.client_state := omit
    log("[TRPO](Decoded MQTT message): ", p_out)
    return 0
  } else {
    log("[TRPO](Error decoding): ", v_mqttMsg)
    return -1
  }
  //} with {extension "prototype(fast)"}
} with {extension "prototype(backtrack)" }

private function f_enc_asp_send(in charstring p_in, out ASP_Send p_out) return integer
{
  log("[TRPO](Encode ASP Event): ", p_in)
  return 0;
  //} with {extension "prototype(fast)"}
} with {extension "prototype(backtrack)" }

private function f_dec_asp_event(in ASP_Event p_in, out charstring p_out) return integer
{
  log("[TRPO](Decode ASP Event): ", p_in)
  p_out := "NO ASP_Event Decoder"

  return 0;
  //} with {extension "prototype(fast)"}
} with {extension "prototype(backtrack)" }


} // module
