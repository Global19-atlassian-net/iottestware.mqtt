/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/
module MQTT_Broker_Pixits {

  import from MQTT_Broker_TypesAndValues all;

   /*
    * @desc the local interface on which to listen for incoming MQTT packets
    * The test system will listen for MQTT on: <PX_LISTEN_HOSTNAME>:<PX_LISTEN_PORT>
    */
   modulepar charstring PX_LISTEN_HOSTNAME := "localhost"

   /*
    * @desc the port on which to wait for incoming MQTT connections
    */
   modulepar IPL4_PortRange PX_LISTEN_PORT := 1883;

   /*
    * @desc define if upper tester should be used
    */
   modulepar boolean PX_USE_UPPER_TESTER := true

   /*
    * @desc the hostname / ip address of the Upper Tester
    * The Upper Tester on the SUT must listen on: <PX_UPPER_TESTER_HOSTNAME>:<PX_UPPER_TESTER_PORT>
    */
   modulepar charstring PX_UPPER_TESTER_HOSTNAME := "localhost"

   /*
    * @desc the port of the Upper Tester
    */
   modulepar IPL4_PortRange PX_UPPER_TESTER_PORT := 1884

   /*
    * @desc the Client Identifier which the SUT will use to authenticate
    */
   modulepar universal charstring PX_CLIENT_ID := "SUTCLIENTID"

   /*
    * @desc the username which the SUT will use to authenticate
    */
   modulepar universal charstring PX_USER_NAME := "SUT_USER_NAME"

   /*
    * @desc the password which the SUT will use to authenticate
    */
   modulepar universal charstring PX_PASSWORD := "SUT_PASSWORD"

   /*
    * @desc TODO
    */
   modulepar universal charstring PX_PUBLISH_TOPIC := "testware/publish/topic"

   /*
    * @desc TODO
    */
   modulepar universal charstring PX_WILL_TOPIC := "testware/will/topic"

   /*
    * @desc TODO
    */
   modulepar universal charstring PX_WILL_MESSAGE := "TESTER'S LWT MESSAGE"


   /**********************************************************************
    * timers and timeout behaviors
    **********************************************************************/

    /*
     * @desc the keep alive is a maximum time interval that is permitted to elapse between
     * two control packets 
     */
    modulepar integer PX_KEEP_ALIVE := 10

   /*
    * @desc max duration in seconds per test case
    */
   modulepar float PX_MAX_TC_TIMER := 20.0;

   /*
    * @desc should a verdict be set if PX_MAX_TC_TIMER times out?
    */
   modulepar boolean PX_ON_TIMEOUT_VERDICT := true;

   /*
    * @desc which verdict should be set if a test case times out?
    */
   modulepar verdicttype PX_ON_TIMEOUT_VERDICT_VAL := fail;

   /*
    * @desc max duration to wait for a retransmission of a PUBLISH packet
    *
    * @remark PX_MAX_TC_TIMER can still timeout earlier. However, PX_PUB_RETRANSMISSION_TIMER is required
    * to define a clear verdict. Thus, PX_PUB_RETRANSMISSION_TIMER should be defined smaller than PX_MAX_TC_TIMER
    *
    * @remark this value is not defined within the MQTT specification
    */
   modulepar float PX_PUB_RETRANSMISSION_TIMER := 5.0;

   /*
    * @desc max duration to wait for a "NO RESPONSE"
    */
   modulepar float PX_AWAIT_NO_RESPONSE_TIMER := 5.0

   /**********************************************************************
    * configuration of optional behaviors
    * optional behaviors result from "MAY" wording in the specification
    * default values will enable the strictest configuration
    **********************************************************************/

    // TODO: move to common PIXITS because MQTT_Client also requires these PIXITS and might change from .cfg
    /*
     * @desc the conformance statement [MQTT-3.1.2-1] specifies that a broker MAY disconnect.
     *       If set to false, the TS broker will only accept 'MQTT' as valid protocol name
     */
    modulepar boolean PX_ACCEPT_ANY_PROTOCOL_NAME := false;

    /*
     * @desc a server MAY allow client ids that contain more than 23 encoded bytes and
     *       characters other than alphanum [MQTT-3.1.3-5]
     *
     */
    modulepar boolean PX_ALLOW_LONG_CLIENT_IDS := true
    modulepar boolean PX_ALLOW_SPECIAL_CHAR_CLIENT_IDS := true
}
