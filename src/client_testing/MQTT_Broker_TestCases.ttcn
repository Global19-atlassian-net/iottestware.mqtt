/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/
module MQTT_Broker_Testcases {

import from MQTT_TestSystem_Common all;
import from MQTT_Broker_Testcase_Functions all;

// defaults
import from MQTT_Defaults_Common all;

// PIXITs
import from MQTT_Broker_Pixits all;

// Functions
import from MQTT_Functions_SetUp all;
import from MQTT_Functions_Network all;
import from MQTT_Functions_Protocol all;
import from MQTTasp_PortType all;

// Types
import from MQTTasp_Types all;

// Templates
import from MQTT_Templates_MQTTasp all;
import from MQTT_Templates_CONNECT all;

group connectGroup
{
  /*
  * @purpose "Header flags in CONNECT Control Packet are reserved for future use"
  *
  * @reference [MQTT-2.2.2-1]
  */
  testcase TC_MQTT_Client_CONNECT_01() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc())
    {
      tc_testcase_max.start;
      var boolean v_verdict_mode := PX_ON_TIMEOUT_VERDICT
      var verdicttype v_verdict_type := PX_ON_TIMEOUT_VERDICT_VAL
      tc_testcase_max.start;
      var default v_timeout_default := activate(a_timeout_default(tc_testcase_max, v_verdict_mode, v_verdict_type))


      f_MQTT_Client_CONNECT_01()

      deactivate(v_timeout_default);
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose "The protocol name representing the protocol is a UTF-8 encoded 'MQTT' string"
  *
  * @reference [MQTT-3.1.2-1]
  */
  testcase TC_MQTT_Client_CONNECT_02() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      var boolean v_verdict_mode := PX_ON_TIMEOUT_VERDICT
      var verdicttype v_verdict_type := PX_ON_TIMEOUT_VERDICT_VAL
      tc_testcase_max.start;
      var default v_timeout_default := activate(a_timeout_default(tc_testcase_max, v_verdict_mode, v_verdict_type))


      f_MQTT_Client_CONNECT_02()

      deactivate(v_timeout_default);
    }
    f_clear_broker_ptc();
  }

  /*
   * @purpose "The 8 bit unsigned value that represents the revision level of the protocol used by the Client. The value of the the Protocol
   *            Level field for the version 3.1.1 of the protocol is 4 (0x04)"
   *
   * @reference [MQTT-3.1.2-2]
   */
  testcase TC_MQTT_Client_CONNECT_03() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      var boolean v_verdict_mode := PX_ON_TIMEOUT_VERDICT
      var verdicttype v_verdict_type := PX_ON_TIMEOUT_VERDICT_VAL
      tc_testcase_max.start;
      var default v_timeout_default := activate(a_timeout_default(tc_testcase_max, v_verdict_mode, v_verdict_type))


      f_MQTT_Client_CONNECT_03()

      deactivate(v_timeout_default);
    }
    f_clear_broker_ptc();
  }
}

  /*
  * @purpose "The Connect Flags byte contains a number of parameters specifying the behavior of the MQTT connection. It also indicates the
  *           presence of absence of fields in the payload. The reserved flag MUST be set to 0"
  *
  * @reference [MQTT-3.1.2-3]
  */
  testcase TC_MQTT_Client_CONNECT_04() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      var boolean v_verdict_mode := PX_ON_TIMEOUT_VERDICT
      var verdicttype v_verdict_type := PX_ON_TIMEOUT_VERDICT_VAL
      tc_testcase_max.start;
      var default v_timeout_default := activate(a_timeout_default(tc_testcase_max, v_verdict_mode, v_verdict_type))


      f_MQTT_Client_CONNECT_04()

      deactivate(v_timeout_default);
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.2-9], [MQTT-3.1.2-14]
  */
  testcase TC_MQTT_Client_CONNECT_05() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      var boolean v_verdict_mode := PX_ON_TIMEOUT_VERDICT
      var verdicttype v_verdict_type := PX_ON_TIMEOUT_VERDICT_VAL
      tc_testcase_max.start;
      var default v_timeout_default := activate(a_timeout_default(tc_testcase_max, v_verdict_mode, v_verdict_type))


      f_MQTT_Client_CONNECT_05()

      deactivate(v_timeout_default);
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.2-11], [MQTT-3.1.2-13], [MQTT-3.1.2-15]
  */
  testcase TC_MQTT_Client_CONNECT_06() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      var boolean v_verdict_mode := PX_ON_TIMEOUT_VERDICT
      var verdicttype v_verdict_type := PX_ON_TIMEOUT_VERDICT_VAL
      tc_testcase_max.start;
      var default v_timeout_default := activate(a_timeout_default(tc_testcase_max, v_verdict_mode, v_verdict_type))


      f_MQTT_Client_CONNECT_06()

      deactivate(v_timeout_default);
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.2-18], [MQTT-3.1.2-20], [MQTT-3.1.2-22]
  */
  testcase TC_MQTT_Client_CONNECT_07() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      var boolean v_verdict_mode := PX_ON_TIMEOUT_VERDICT
      var verdicttype v_verdict_type := PX_ON_TIMEOUT_VERDICT_VAL
      tc_testcase_max.start;
      var default v_timeout_default := activate(a_timeout_default(tc_testcase_max, v_verdict_mode, v_verdict_type))

      f_MQTT_Client_CONNECT_07()

      deactivate(v_timeout_default);
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.2-19]
  */
  testcase TC_MQTT_Client_CONNECT_08() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      f_MQTT_Client_CONNECT_08()
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.2-21]
  */
  testcase TC_MQTT_Client_CONNECT_09() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      f_MQTT_Client_CONNECT_09()
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.3-1]
  */
  testcase TC_MQTT_Client_CONNECT_10() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      f_MQTT_Client_CONNECT_10()
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.3-4], [MQTT-1.5.3-1]
  */
  testcase TC_MQTT_Client_CONNECT_11() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      f_MQTT_Client_CONNECT_11()
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.3-7]
  */
  testcase TC_MQTT_Client_CONNECT_12() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      f_MQTT_Client_CONNECT_12()
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.3-10]
  */
  testcase TC_MQTT_Client_CONNECT_13() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      f_MQTT_Client_CONNECT_13()
    }
    f_clear_broker_ptc();
  }

  /*
  * @purpose TODO
  *
  * @reference [MQTT-3.1.3-11]
  */
  testcase TC_MQTT_Client_CONNECT_14() runs on MQTT_Broker_PTC
  {
    if(f_init_broker_ptc()) {
      f_MQTT_Client_CONNECT_14()
    }
    f_clear_broker_ptc();
  }

} // module
