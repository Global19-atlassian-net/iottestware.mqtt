/*******************************************************************************
 * Copyright (c) 2019 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/
module UT_Templates {
    import from UTasp_Types all;
    import from UT_Types all;
    import from MQTT_Broker_Pixits all;

    template MQTT_UT_Message m_ut_client_connect_pre_condition(charstring p_host, integer p_port_num, charstring p_free_text) :=
    {
      msg_type := CONNECT,
      msg := {
        connect_msg := {
          host := p_host,
          port_num := p_port_num,
          clean_session := true,
          keep_alive := 60,
          client_identifier := omit,
          lwt := omit,
          user_name := omit,
          password := omit
        }
      },
      free_text := p_free_text,
      test_case := testcasename()
    }

    template MQTT_UT_Message m_ut_client_connect_01(charstring p_host, integer p_port_num, charstring p_free_text) :=
    {
      msg_type := CONNECT,
      msg := {
        connect_msg := {
          host := p_host,
          port_num := p_port_num,
          clean_session := true,
          keep_alive := 60,
          client_identifier := omit,
          lwt := omit,
          user_name := omit,
          password := omit
        }
      },
      free_text := p_free_text,
      test_case := testcasename()
    } // TODO: how to omit optional fields automatically?

    // technically the same as m_ut_client_connect_01... used should be used only in f_MQTT_Client_CONNECT_02
    template MQTT_UT_Message m_ut_client_connect_02(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 := { }

    template MQTT_UT_Message m_ut_client_connect_03(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 := { }

    template MQTT_UT_Message m_ut_client_connect_04(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 := { }

    template MQTT_UT_Message m_ut_client_connect_05(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 :=
    {
      msg := {
        connect_msg := {
          lwt := {
            will_qos := AT_MOST_ONCE_DELIVERY,
            will_retain := false,
            will_topic := PX_WILL_TOPIC,
            will_message := PX_WILL_MESSAGE
          }
        }
      }
    }

    template MQTT_UT_Message m_ut_client_connect_06(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_05 := { }

    template MQTT_UT_Message m_ut_client_connect_07(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 := { }

    template MQTT_UT_Message m_ut_client_connect_08(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 := {
      msg := {
        connect_msg := {
          user_name := PX_USER_NAME,
          password := omit
        }
      }
    }

    template MQTT_UT_Message m_ut_client_connect_09(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_08 := {
      msg := {
        connect_msg := {
          password := unichar2oct(PX_PASSWORD)
        }
      }
    }

    template MQTT_UT_Message m_ut_client_connect_10(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 := {
      msg := {
        connect_msg := {
          client_identifier := PX_CLIENT_ID,
          lwt := {
            will_qos := AT_MOST_ONCE_DELIVERY,
            will_retain := false,
            will_topic := PX_WILL_TOPIC,
            will_message := PX_WILL_MESSAGE
          },
          user_name := PX_USER_NAME,
          password := unichar2oct(PX_PASSWORD)
        }
      }
    }

    template MQTT_UT_Message m_ut_client_connect_11(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 :=
    {
      msg := {
        connect_msg := {
          clean_session := false
        }
      }
    }

    template MQTT_UT_Message m_ut_client_connect_12(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_01 :=
    {
      msg := {
        connect_msg := {
          clean_session := true,
          client_identifier := omit
        }
      }
    }

    template MQTT_UT_Message m_ut_client_connect_13(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_05 := { }

    template MQTT_UT_Message m_ut_client_connect_14(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_connect_08 := { }

    template MQTT_UT_Message m_ut_client_publish_01(charstring p_host, integer p_port_num, charstring p_free_text) :=
    {
      msg_type := PUBLISH,
      msg := {
        publish := {
          qos_level := AT_MOST_ONCE_DELIVERY,
          retain_flag := false,
          topic_name := PX_WILL_TOPIC,
          payload_size := omit
        }
      },
      free_text := p_free_text,
      test_case := testcasename()
    }

    template MQTT_UT_Message m_ut_client_publish_02(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_publish_01 := {
      msg := {
        publish := {
          qos_level := AT_LEAST_ONCE_DELIVERY
        }
      }
    }

    template MQTT_UT_Message m_ut_client_publish_03(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_publish_01 := {
      msg := {
        publish := {
          qos_level := EXACTLY_ONE_DELIVERY
        }
      }
    }

    template MQTT_UT_Message m_ut_client_publish_04(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_publish_01 := {
      msg := {
        publish := {
          topic_name := WILDCARD
        }
      }
    }

    template MQTT_UT_Message m_ut_client_publish_05(charstring p_host, integer p_port_num, charstring p_free_text)
    modifies m_ut_client_publish_04 := {}

    template UTasp_Message m_ut_message(template MQTT_UT_Message p_msg, UT_Connection p_conn) :=
    {
      msg := p_msg,
      conn := p_conn
    }
}
