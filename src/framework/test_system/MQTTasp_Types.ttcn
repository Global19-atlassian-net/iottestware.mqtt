/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/
module MQTTasp_Types {

import from MQTT_v3_1_1_Types all;
import from IPL4asp_Types all;

type ASP_Event MQTT_ASP_Event;  // map ASP_Event to avoid import of IPL4asp_Types

type enumerated TCP_State { Connected, Disconnected } // Connected if MQTTClientState != Disconnected

// Notes:
// Wait_publish is used to mark dropped publish packets -> wait for re-transmission of publish on QoS > 0
type enumerated MQTT_ClientState { Idle, Wait_connack, Connected, Wait_suback, Wait_unsuback, Wait_publish, Wait_puback, Wait_pubrec, Wait_pubrel, Wait_pubcomp,  Subscribed , Disconnected }

type record IPL4_Connection {
  integer id,
  charstring remote_name, // the remote IP/hostname
  integer remote_port,    // the remote port
  charstring local_name,  // the local IP/hostname
  integer local_port,     // the local port
  boolean reuse_address,
  TCP_State tcp_state
}

type record MQTT_Connection {
  IPL4_Connection ipl4,
  MQTT_ClientState client_state optional
}
type record of MQTT_Connection MQTT_ConnectionList

type record MQTTasp_Message {
  MQTT_v3_1_1_Message msg,
  MQTT_Connection conn
}


// TODO: move somewhere to utils/helpers
// This structures and methods required to handle multiple QoS message flows
type enumerated AT_MOST_ONCE_DELIVERY_STATE { e_wait_publish, e_wait_pubrec, e_wait_pubrel, e_wait_pubcomp, e_completed }
type record MessageFlowState {
  integer packet_id,
  AT_MOST_ONCE_DELIVERY_STATE message_state
}

type record of MessageFlowState MessageFlowList

/*
function f_get_flow_state_by_id(MessageFlowList p_list, integer p_packet_id) return AT_MOST_ONCE_DELIVERY_STATE {
  var AT_MOST_ONCE_DELIVERY_STATE v_ret := e_wait_publish
  for(var integer v_idx := 0; v_idx < lengthof(p_list); v_idx := v_idx + 1) {
    if(p_list[v_idx].packet_id == p_packet_id) { v_ret := p_list[v_idx].message_state }
  }

  return v_ret
}*/

function f_get_index_by_id(MessageFlowList p_list, integer p_packet_id) return integer {
  var integer v_ret := -1
  for(var integer v_idx := 0; v_idx < lengthof(p_list); v_idx := v_idx + 1) {
    if(p_list[v_idx].packet_id == p_packet_id) { v_ret := v_idx }
  }

  return v_ret
}

} // module
