/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/
module MQTT_TestSystem_Common
{

//import from IPL4asp_Types all;
//import from IPL4asp_PortType all;

import from MQTTasp_Types all;
import from MQTTasp_PortType all;

import from UTasp_Types all;
import from UTasp_PortType all;

import from MQTT_TypesAndValues all;  // MQTT_Client_TypesAndValues
import from MQTT_Broker_TypesAndValues all;
import from MQTT_Broker_Pixits all;
import from MQTT_Pixits all;

group common_components {

  /*
  * Basic MTC (Main Test Component)
  */
  type component MQTT_MTC
  {
    port MQTTasp_PT MQTT_PCO;
  }
}

group broker_components {
  /*
  * MQTT Broker Test Component contains capabilities and context of a MQTT Broker
  * Note: MQTT_Broker_MTC emulates a Broker and is used to test Clients
  */
  type component MQTT_Broker_MTC extends MQTT_MTC
  {
    // timer locally available for MQTT_Broker_PTC; value retrieved from .cfg (PIXIT)
    timer tc_testcase_max := PX_MAX_TC_TIMER;
    var default vc_timeout_default;
    var default vc_accept_tcp_conn;

    var MQTT_BrokerContext ctx;
    var MQTT_ConnectionList vl_connections;

    var UT_ConnectionList vl_ut_connections;
    port UTasp_PT UT_PCO;

    // TODO: this is a workaround for now
    // first we will handle only one single UT connect, this is the ID the get from vl_ut_connections
    var integer vl_ut_idx;
  }
}

group client_components {
  type component MQTT_Client_TestSystem
  {
    port MQTTasp_PT mqtt_client_1;
    port MQTTasp_PT mqtt_client_2;
  }

  type record of MQTT_Client_MTC MQTT_Client_List;
  type component MQTT_Client_SecurityTestSystem
  {
    port MQTTasp_PT mqtt_probe_client;
    port MQTTasp_PT mqtt_attacker_0;
    port MQTTasp_PT mqtt_attacker_1;
    port MQTTasp_PT mqtt_attacker_2;
    port MQTTasp_PT mqtt_attacker_3;
  }

  /*
   * MQTT Client Test Component contains capabilities and context of a MQTT Client
   * * Note: MQTT_Client_MTC emulates a Client and is used to test Brokers
   */
  type component MQTT_Client_MTC extends MQTT_MTC
  {
    var MQTT_Connection connection;
    var MqttClientCredentials credentials;
  }
}

} // module
