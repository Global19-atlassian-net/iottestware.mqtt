/*******************************************************************************
* Copyright (c) 2018
* All rights reserved. This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Alexander Kaiser
*   Sascha Hackel
*   Axel Rennoch
*******************************************************************************/
module Random_Helper
{
  // FileIO
  import from TCCFileIO_Functions all;

  /*
  * @desc create a random non-zero MQTT Packet ID as described in MQTT 2.3.1
  */
  function f_random_packet_id() return integer
  {
    var integer v_ret := 0;
    while(v_ret == 0)
    {
      v_ret := float2int(rnd() * 65535.0)
    }
    return v_ret;
  }

  /*
  * @desc create a random port number between 1024 and 65535 (non-privileged ports)
  */
  function f_random_port_number() return integer
  {
    const float c_min := 1024.0;
    const float c_max := 65535.0;
    var integer v_ret := float2int(c_min + rnd() * (c_max - c_min))
    return v_ret
  }

  /*
  * @desc create a octetstring with a specified length to be used as payload.
  *       The payload is marked with 'A5A5'O in the beginning
  * @remark for bigger payloads this functions is too slow. Try to use f_test_long_payload instead
  */
  function f_test_payload(integer p_length) return octetstring
  {
    var octetstring v_ret := 'A5A5'O  // initi with marker pattern

    for(var integer i := 2; i < p_length; i := i + 1)
    {
      var octetstring v_appendix := int2oct((i mod 255), 1)
      v_ret := v_ret & v_appendix
    }
    return v_ret
  }

  function f_test_charstring(integer p_length) return universal charstring
  {
    var universal charstring v_ret := "A5A5"  // initi with marker pattern

    var integer v_current_len := 4
    while(v_current_len < p_length) {
      v_current_len := v_current_len + 1
      var universal charstring v_appendix := "A"
      v_ret := v_ret & v_appendix
    }

    /*for(var integer i := 2; i < p_length; i := i + 1)
    {
      var universal charstring v_appendix := oct2unichar(int2oct((i mod 255), 1))
      v_ret := v_ret & v_appendix
    }*/

    return v_ret
  }

  function f_test_long_payload(charstring p_file_path, integer p_length) return octetstring
  {
    var octetstring v_payload

    var integer v_fd := f_FIO_open_rdonly(p_file_path)
    if(v_fd > 0)
    {
      var integer v_ret := f_FIO_read_data(v_fd, v_payload, p_length)

      // the file can contain less bytes as required; seek_home and read again!
      var integer v_remain := p_length - v_ret
      while(v_remain > 0)
      {
        f_FIO_seek_home(v_fd)
        var octetstring v_p2
        v_ret := f_FIO_read_data(v_fd, v_p2, v_remain)
        v_remain := v_remain - v_ret
        v_payload := v_payload & v_p2
      }

      // TODO: check v_ret before close?

      f_FIO_close(v_fd)
    }
    else
    {
      // use f_test_payload as fallback if file was not found
      // Note: this can be time consuming for large payload
      log(p_file_path, " could not be opened. Using fallback function to generate payload")
      v_payload := f_test_payload(p_length)
    }

    return v_payload
  }
}
