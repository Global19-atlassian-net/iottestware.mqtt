/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/

 /*
  * This module contains all templates related to PUBLISH control packets
  */
module MQTT_Templates_PUBLISH
{
  import from MQTT_v3_1_1_Types all;

  /*
   * Sending Templates are templates without any wildcards or matching expressions.
   * Thus, this templates can be used to create concrete MQTT PDUs with valueof(T)
   */
  group sendingTemplates
  {
    group fixedHeaderGroup
    {
      template MQTT_v3_1_1_PublishHeader t_publish_header(BIT1n p_dup_flag := '0'B, QoS p_qos := AT_MOST_ONCE_DELIVERY, BIT1n p_retain_flag := '0'B) :=
      {
        packetType := '0011'B,
        dup_flag := p_dup_flag,
        qos_level := p_qos,
        retain_flag := p_retain_flag,
        remLength := '00000000'O
      }
    } // end group fixedHeaderGroup

    group Publish_Group
    {
      template MQTT_v3_1_1_Publish t_publish_packet(MQTT_v3_1_1_PublishHeader p_header, integer p_packet_id, UTF8EncodedString p_topic, octetstring p_payload) :=
      {
        header := p_header,
        nameLength := p_topic.stringLength,
        topic_name := p_topic.stringItem,
        packet_identifier := p_packet_id,
        payload := p_payload
      }

      template MQTT_v3_1_1_Publish t_publish_packet_qos_0(MQTT_v3_1_1_PublishHeader p_header, UTF8EncodedString p_topic, octetstring p_payload) :=
      {
        header := p_header,
        nameLength := p_topic.stringLength,
        topic_name := p_topic.stringItem,
        packet_identifier := omit,
        payload := p_payload
      }
    }

    group PUBLISH_MessageGroup
    {
      template MQTT_v3_1_1_Message m_publish_message(MQTT_v3_1_1_PublishHeader p_header, integer p_packet_id, UTF8EncodedString p_topic, octetstring p_payload) :=
      {
        msg :=
        {
          publish := t_publish_packet(p_header, p_packet_id, p_topic, p_payload)
        }
      }
    } // end group publishMessageGroup
  } // end group sendingTemplates

  /*
   * Matchin Templates are templates with wildcards or matching expressions.
   * This templates should be only used for matching incoming MQTT PDUs
   */
  group matchingTemplates
  {
    group fixedHeaderGroup
    {
      template MQTT_v3_1_1_PublishHeader mw_publish_header :=
      {
        packetType := '0011'B,
        dup_flag := ?,
        qos_level := ?,
        retain_flag := ?,
        remLength := ?
      }

      template MQTT_v3_1_1_PublishHeader mdw_publish_header_qos(QoS p_qos_level)
      modifies mw_publish_header :=
      {
        qos_level := p_qos_level
      }

      template MQTT_v3_1_1_PublishHeader mdw_publish_header_dup(QoS p_qos_level, BIT1n p_dup_flag)
      modifies mw_publish_header :=
      {
        dup_flag := p_dup_flag,
        qos_level := p_qos_level
      }

      template MQTT_v3_1_1_PublishHeader mdw_publish_header_retain(QoS p_qos_level, BIT1n p_retain_flag)
      modifies mw_publish_header :=
      {
        qos_level := p_qos_level,
        retain_flag := p_retain_flag
      }
    } // end group fixedHeaderGroup

    group PUBLISH_MessageGroup
    {
      template MQTT_v3_1_1_Message mw_publish_all :=
      {
        msg :=
        {
          publish := ?
        }
      }

      template MQTT_v3_1_1_Message mw_publish_basic :=
      {
        msg :=
        {
          publish :=
          {
            header := mw_publish_header,
            nameLength := ?,
            topic_name := ?,
            packet_identifier := ?,
            payload := ?
          }
        }
      }

      template MQTT_v3_1_1_Message mdw_publish_qos(QoS p_qos_level)
      modifies mw_publish_basic :=
      {
        msg :=
        {
          publish :=
          {
            header := mdw_publish_header_qos(p_qos_level)
          }
        }
      }

      template MQTT_v3_1_1_Message mw_publish_dup(QoS p_qos_level, BIT1n p_dup_flag) :=
      {
        msg :=
        {
          publish :=
          {
            header := mdw_publish_header_dup(p_qos_level, p_dup_flag),
            nameLength := ?,
            topic_name := ?,
            packet_identifier := ?,
            payload := ?
          }
        }
      }

      template MQTT_v3_1_1_Publish mw_publish_packet_retain_qos0(BIT1n p_retain_flag := '1'B) :=
      {
        header := mdw_publish_header_retain(AT_MOST_ONCE_DELIVERY, p_retain_flag),
        nameLength := ?,
        topic_name := ?,
        packet_identifier := omit,  // QoS 0 publish does not have a packet_identifier
        payload := ?
      }

      template MQTT_v3_1_1_Publish mw_publish_packet_zero_payload_qos0(BIT1n p_retain_flag := '1'B)
      modifies mw_publish_packet_retain_qos0 :=
      {
        payload := ''O
      }

      template MQTT_v3_1_1_Publish mw_publish_packet_alternative_payload_qos0(BIT1n p_retain_flag := '1'B, octetstring p_payload)
      modifies mw_publish_packet_retain_qos0 :=
      {
        payload := p_payload
      }

      template MQTT_v3_1_1_Publish mw_publish_packet_payload_qos0(octetstring p_payload) :=
      {
        header := mw_publish_header,
        nameLength := ?,
        topic_name := ?,
        packet_identifier := omit,  // QoS 0 publish does not have a packet_identifier
        payload := p_payload
      }

      template MQTT_v3_1_1_Publish mw_publish_packet_retain(QoS p_qos_level, BIT1n p_retain_flag) :=
      {
        header := mdw_publish_header_retain(p_qos_level, p_retain_flag),
        nameLength := ?,
        topic_name := ?,
        packet_identifier := ?,
        payload := ?
      }

      template MQTT_v3_1_1_Message mw_publish_retain_qos0(BIT1n p_retain_flag := '1'B) :=
      {
        msg :=
        {
          publish := mw_publish_packet_retain_qos0(p_retain_flag)
        }
      }

      template MQTT_v3_1_1_Message mw_publish_retain(QoS p_qos_level, BIT1n p_retain_flag) :=
      {
        msg :=
        {
          publish := mw_publish_packet_retain(p_qos_level, p_retain_flag)
        }
      }


    } // end group PUBLISH_MessageGroup
  } // group matchingTemplates

} // module
