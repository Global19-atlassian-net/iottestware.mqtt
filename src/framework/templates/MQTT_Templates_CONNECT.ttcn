/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/

 /*
  * This module contains all templates related to CONNECT control packets
  */
module MQTT_Templates_CONNECT
{
  import from MQTT_v3_1_1_Types all;

  /*
   * Sending Templates are templates without any wildcards or matching expressions.
   * Thus, this templates can be used to create concrete MQTT PDUs with valueof(T)
   */
  group SendingTemplates
  {
    /*
    * CONNECT Control Packet
    *
    * @reference http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180841
    */
    group CONNECT_Group
    {
      group FixedHeader_Group
      {
        template Header m_connect_header(BIT4n p_flags := '0000'B) :=
        {
          packetType := '0001'B ,
          flags := p_flags,
          remLength := '00000000'O  // f_calcRemLength will set this field automatically after encoding
        }
      } // end group fixedHeader_Group

      group CONNECT_Flags_Group
      {
        template MQTT_v3_1_1_ConnectFlags m_connect_flags_basic :=
        {
          user_name_flag := '0'B,
          password_flag := '0'B,
          will_retain := '0'B,
          will_qos := AT_MOST_ONCE_DELIVERY,
          will_flag := '0'B,
          clean_session := '1'B,
          reserved := '0'B
        }

        template MQTT_v3_1_1_ConnectFlags md_connect_credentials
        modifies m_connect_flags_basic :=
        {
          user_name_flag := '1'B,
          password_flag := '1'B
        }

        template MQTT_v3_1_1_ConnectFlags md_connect_flags_lwt(BIT1n p_will_flag := '1'B, BIT1n p_will_retain := '0'B, QoS p_will_qos := AT_MOST_ONCE_DELIVERY)
        modifies m_connect_flags_basic :=
        {
          will_retain := p_will_retain,
          will_qos := p_will_qos,
          will_flag := p_will_flag
        }

        template MQTT_v3_1_1_ConnectFlags md_connect_credentials_lwt(BIT1n p_will_flag := '1'B, BIT1n p_will_retain := '0'B, QoS p_will_qos := AT_MOST_ONCE_DELIVERY, BIT1n p_clean_session := '1'B)
        modifies md_connect_credentials :=
        {
          will_retain := p_will_retain,
          will_qos := p_will_qos,
          will_flag := p_will_flag,
          clean_session := p_clean_session
        }
      } // end group connectFlags_Group

      group CONNECT_Payload_Group
      {
        template MQTT_v3_1_1_ConnectPayload m_connect_payload_client_id(UTF8EncodedString p_client_id) :=
        {
          client_identifier := p_client_id,
          will_topic := omit,
          will_message := omit,
          user_name := omit,
          password := omit
        }

        template MQTT_v3_1_1_ConnectPayload m_connect_payload_credentials(
          UTF8EncodedString p_client_id,
          UTF8EncodedString p_user_name,
          OctStringWithLength p_password) :=
        {
          client_identifier := p_client_id,
          will_topic := omit,
          will_message := omit,
          user_name := p_user_name,
          password := p_password
        }

        template MQTT_v3_1_1_ConnectPayload m_connect_payload_credentials_lwt(
          UTF8EncodedString p_client_id,
          UTF8EncodedString p_will_topic,
          OctStringWithLength p_will_msg,
          UTF8EncodedString p_user_name,
          OctStringWithLength p_password) :=
        {
          client_identifier := p_client_id,
          will_topic := p_will_topic,
          will_message := p_will_msg,
          user_name := p_user_name,
          password := p_password
        }
      } // end group connectPayload_Group

      group CONNECT_Message_Group
      {
        template MQTT_v3_1_1_Connect m_connect_packet_mqtt4(template MQTT_v3_1_1_ConnectFlags p_flags, template MQTT_v3_1_1_ConnectPayload p_payload) :=
        {
          header := m_connect_header,
          nameLength := 4,
          name := "MQTT",
          protocol_level := 4,
          flags := p_flags,
          keep_alive := 0,
          payload := p_payload
        }

        template MQTT_v3_1_1_Message m_connect_message_base(UTF8EncodedString p_client_id) :=
        {
          msg :=
          {
            connect_msg :=
            {
              header := m_connect_header,
              nameLength := 4,
              name := "MQTT",
              protocol_level := 4,
              flags := m_connect_flags_basic,
              keep_alive := 0,
              payload := m_connect_payload_client_id(p_client_id)
            }
          }
        }

        template MQTT_v3_1_1_Message m_connect_message_base_02(template MQTT_v3_1_1_ConnectFlags p_flags, template MQTT_v3_1_1_ConnectPayload p_payload) :=
        {
          msg :=
          {
            connect_msg :=
            {
              header := m_connect_header,
              nameLength := 4,
              name := "MQTT",
              protocol_level := 4,
              flags := p_flags,
              keep_alive := 0,
              payload := p_payload
            }
          }
        }

        template MQTT_v3_1_1_Message md_connect_message_keep_alive(UTF8EncodedString p_client_id, integer p_keep_alive)
        modifies m_connect_message_base :=
        {
          msg :=
          {
            connect_msg :=
            {
              keep_alive := p_keep_alive
            }
          }
        }

        template MQTT_v3_1_1_Message m_connect_credentials_payload_lwt(
          UTF8EncodedString p_client_id,
          UTF8EncodedString p_will_topic,
          OctStringWithLength p_will_msg,
          UTF8EncodedString p_user_name,
          OctStringWithLength p_password)
        modifies m_connect_message_base :=
        {
          msg :=
          {
            connect_msg :=
            {
              flags := md_connect_credentials_lwt,
              payload := m_connect_payload_credentials_lwt(p_client_id, p_will_topic, p_will_msg, p_user_name, p_password)
            }
          }
        }
      } // end group connectMessage_Group
    } // end group connect_Group
  } // end group sendingTemplates

  /*
   * Matchin Templates are templates with wildcards or matching expressions.
   * This templates should be only used for matching incoming MQTT PDUs
   */
  group MatchingTemplates
  {
    /*
    * CONNECT Control Packet
    *
    * @reference http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/errata01/os/mqtt-v3.1.1-errata01-os-complete.html#_Toc442180841
    */
    group CONNECT__Group
    {
      group FixedHeader_Group
      {
        template Header mw_connect_header(BIT4n p_flags := '0000'B) :=
        {
          packetType := '0001'B ,
          flags := p_flags,
          remLength := ?
        }
      } // end group fixedHeader_Group

      group CONNECT_Flags_Group
      {
        template MQTT_v3_1_1_ConnectFlags mw_connect_flags_basic :=
        {
          user_name_flag := ?,
          password_flag := ?,
          will_retain := ?,
          will_qos := ?,
          will_flag := ?,
          clean_session := ?,
          reserved := ?
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_flags_valid
        modifies mw_connect_flags_basic :=
        {
          reserved := '0'B
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_reserved_flag(BIT1n p_flag := '0'B)
        modifies mw_connect_flags_basic :=
        {
          reserved := p_flag
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_will_flag(BIT1n p_flag := '1'B)
        modifies mw_connect_flags_basic :=
        {
          will_flag := p_flag
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_will_retain(BIT1n p_flag := '1'B)
        modifies mw_connect_flags_basic :=
        {
          will_retain := p_flag
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_willretain(BIT1n p_will_flag := '1'B, BIT1n p_will_retain := '1'B)
        modifies mw_connect_flags_basic :=
        {
          will_retain := p_will_retain,
          will_flag := p_will_flag
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_will_qos(QoS p_qos := AT_MOST_ONCE_DELIVERY)
        modifies mw_connect_flags_basic :=
        {
          will_qos := p_qos
        }

        // TODO: remove default parameters?
        template MQTT_v3_1_1_ConnectFlags mdw_connect_lwt(BIT1n p_flag := '1'B, BIT1n p_retain := '1'B, QoS p_qos := AT_MOST_ONCE_DELIVERY)
        modifies mw_connect_flags_basic :=
        {
          will_retain := p_retain,
          will_qos := p_qos,
          will_flag := p_flag
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_credentials(BIT1n p_user_name, BIT1n p_password)
        modifies mw_connect_flags_basic :=
        {
          user_name_flag := p_user_name,
          password_flag := p_password
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_credentials_username(BIT1n p_user_name := '1'B)
        modifies mw_connect_flags_basic :=
        {
          user_name_flag := p_user_name
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_credentials_password(BIT1n p_password := '1'B)
        modifies mw_connect_flags_basic :=
        {
          password_flag := p_password
        }

        template MQTT_v3_1_1_ConnectFlags mdw_connect_clean_session(BIT1n p_clean_session)
        modifies mw_connect_flags_basic :=
        {
          clean_session := p_clean_session
        }
      } // end group connectFlags_Group

      group CONNECTPayload_Group
      {
        template MQTT_v3_1_1_ConnectPayload mw_connect_payload :=
        {
          client_identifier := ?,
          will_topic := ?,
          will_message := ?,
          user_name := ?,
          password := ?
        }

        template MQTT_v3_1_1_ConnectPayload mdw_connect_payload_zero_byte_client_id
        modifies mw_connect_payload :=
        {
          client_identifier := { stringLength := 0, stringItem := "" }
        }

        template MQTT_v3_1_1_ConnectPayload mw_connect_payload_credentials(UTF8EncodedString p_user_name, OctStringWithLength p_password) :=
        {
          client_identifier := ?,
          will_topic := ?,
          will_message := ?,
          user_name := p_user_name,
          password := p_password
        }

        template MQTT_v3_1_1_ConnectPayload mw_connect_payload_username(template UTF8EncodedString p_user_name) :=
        {
          client_identifier := ?,
          will_topic := ?,
          will_message := ?,
          user_name := p_user_name,
          password := ?
        }

        template MQTT_v3_1_1_ConnectPayload mw_connect_payload_credentials_empty :=
        {
          client_identifier := { stringLength := ?, stringItem := ? },
          will_topic := ?,
          will_message := ?,
          user_name := omit,
          password := omit
        } with {optional "explicit omit"}   // Note: can be removed?

        template MQTT_v3_1_1_ConnectPayload mw_connect_payload_lwt_empty :=
        {
          client_identifier := ?,
          will_topic := omit,
          will_message := omit,
          user_name := ?,
          password := ?
        }
      } // end group connectPayload_Group

      group CONNECTMessage_Group
      {
        template MQTT_v3_1_1_Message mw_connect :=
        {
          msg :=
          {
            connect_msg := ?
          }
        }

        template MQTT_v3_1_1_Message mw_connect_valid_mqtt_311 :=
        {
          msg :=
          {
            connect_msg :=
            {
              header := mw_connect_header,
              nameLength := 4,
              name := "MQTT",
              protocol_level := 4,
              flags := mdw_connect_flags_valid,
              keep_alive := ?,
              payload := ?
            }
          }
        }

        template MQTT_v3_1_1_Message mdw_connect_valid_mqtt_x
        modifies mw_connect_valid_mqtt_311 :=
        {
          msg :=
          {
            connect_msg :=
            {
              header := ?,
              protocol_level := ?
            }
          }
        }

        template MQTT_v3_1_1_Message mw_connect_protocol_name :=
        {
          msg :=
          {
            connect_msg :=
            {
              header := ?,
              nameLength := 4,
              name := "MQTT",
              protocol_level := ?,
              flags := ?,
              keep_alive := ?,
              payload := ?
            }
          }
        }

        template MQTT_v3_1_1_Connect mw_connect_msg_protocol_name :=
        {
          header := ?,
          nameLength := 4,
          name := "MQTT",
          protocol_level := ?,
          flags := ?,
          keep_alive := ?,
          payload := ?
        }

        template MQTT_v3_1_1_Message mw_connect_protocol_level :=
        {
          msg :=
          {
            connect_msg :=
            {
              header := ?,
              nameLength := ?,
              name := ?,
              protocol_level := 4,
              flags := ?,
              keep_alive := ?,
              payload := ?
            }
          }
        }

        template MQTT_v3_1_1_Connect mw_connect_msg_protocol_level :=
        {
          header := ?,
          nameLength := ?,
          name := ?,
          protocol_level := 4,
          flags := ?,
          keep_alive := ?,
          payload := ?
        }

        template MQTT_v3_1_1_Message mw_connect_reserved
        modifies mw_connect :=
        {
          msg :=
          {
            connect_msg :=
            {
              flags := mdw_connect_reserved_flag
            }
          }
        }

        template MQTT_v3_1_1_Message mw_connect_will_flag(BIT1n p_flag := '1'B)
        modifies mw_connect :=
        {
          msg :=
          {
            connect_msg :=
            {
              flags := mdw_connect_will_flag(p_flag)
            }
          }
        }

        /*
         * the payload is empty, but you can still set the user_name and password flags
         */
        template MQTT_v3_1_1_Message mw_connect_credentials_empty(BIT1n p_user_name := '0'B, BIT1n p_password := '0'B)
        modifies mw_connect :=
        {
          msg :=
          {
            connect_msg :=
            {
              flags := mdw_connect_credentials(p_user_name, p_password),
              payload := mw_connect_payload_credentials_empty
            }
          }
        }

        /*
         * the payload is ?, but you can still set the user_name and password flags
         */
        template MQTT_v3_1_1_Message mw_connect_credentials_payload(BIT1n p_user_name, BIT1n p_password)
        modifies mw_connect :=
        {
          msg :=
          {
            connect_msg :=
            {
              flags := mdw_connect_credentials(p_user_name, p_password),
              payload := ?
            }
          }
        }

        // TODO: align previous templates to mdw_connect_[msg | payload | flags]
        template MQTT_v3_1_1_Message mdw_connect_msg_clean_session(BIT1n p_clean_session := '1'B)
        modifies mw_connect :=
        {
          msg :=
          {
            connect_msg :=
            {
              flags := mdw_connect_clean_session(p_clean_session),
              payload := mdw_connect_payload_zero_byte_client_id
            }
          }
        }

      } // end group connectMessage_Group
    } // end group connect_Group
  } // end group matchingTemplates
} // module
