/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/
module MQTT_Functions_SetUp
{
  import from MQTT_TestSystem_Common all;
  import from MQTT_TypesAndValues_Common all;

  import from MQTT_Pixits all;
  import from MQTT_Broker_Pixits all;
  import from MQTT_Defaults_Common all;

  import from MQTT_Functions_Network all;
  import from MQTT_Functions_Protocol all;

  import from IPL4asp_Types all;

  import from UTasp_CtrlFunct all;
  import from UTasp_Types all;

  import from Random_Helper all;

  group Broker
  {
    /*
    * initialize a broker MTC
    * @return
    */
    function f_init_broker(boolean p_auto_connack := true) runs on MQTT_Broker_MTC return boolean
    {
      log("[INIT](Initialize MQTT Broker PTC)")
      map(self:MQTT_PCO, system:MQTT_PCO);

      if (PX_USE_UPPER_TESTER)
      {
        log("[INIT](Connect Upper Tester): ", PX_UPPER_TESTER_HOSTNAME, ":", PX_UPPER_TESTER_PORT)
        var boolean v_ut_connect := f_connect_ut();
        if (not v_ut_connect)
        {
          // TODO: test this case...
          log("[INIT](Could not connect to Upper Tester ", PX_UPPER_TESTER_HOSTNAME, ":", PX_UPPER_TESTER_PORT)
          stop;
        }
      }

      var Result vl_result := f_ipl4_listen(p_port := PX_LISTEN_PORT);
      if (not(ispresent(vl_result.connId)))
      {
        log("[INIT](Could not bind TCP port ", PX_LISTEN_PORT, ")");

        // TODO: test this case, similar construct caused already problems in the past
        // see https://github.com/eclipse/iottestware.mqtt/commit/1767d6bca1ef3e3958e05adf6e444b6d86f8ad9d
        stop;
      }

      // TODO: check if PX_MAX_TC_TIMER < 0.0 ??
      //if (PX_MAX_TC_TIMER > 0.0) { vl_testcase_max := PX_MAX_TC_TIMER }


      // TODO: check result
      ctx.connId := vl_result.connId
      vl_connections := {}

      // start timer and activate the default behavior
      tc_testcase_max.start;
      vc_timeout_default := activate(a_timeout_default(tc_testcase_max, PX_ON_TIMEOUT_VERDICT, PX_ON_TIMEOUT_VERDICT_VAL))

      // activate auto accept of incoming tcp connections
      vc_accept_tcp_conn := activate(a_accept_tcp_conn())

      return true;
    }

    function f_clear_broker() runs on MQTT_Broker_MTC
    {
      log("[CLR](Clear MQTT Broker PTC)")

      // deactivate the default timeout behavior
      deactivate(vc_timeout_default);
      deactivate(vc_accept_tcp_conn);

      // cleanly disconnect all connections
      f_disconnect_all();

      if (PX_USE_UPPER_TESTER)
      {
        log("[CLR](Disconnect Upper Tester)")
        f_disconnect_ut();
      }

      unmap(self:MQTT_PCO, system:MQTT_PCO);
      self.stop;
    }


    // TODO: move this function to upper_tester
    private function f_connect_ut() runs on MQTT_Broker_MTC
    return boolean
    {
      map(self:UT_PCO, system:UT_PCO);
      var boolean v_connectState := true;

      // set the remote Host
      var UT_Connection v_ut_conn;
      v_ut_conn.local_name := "0.0.0.0";
      v_ut_conn.remote_name := PX_UPPER_TESTER_HOSTNAME;
      v_ut_conn.local_port := f_random_port_number()
      v_ut_conn.remote_port := PX_UPPER_TESTER_PORT;
      v_ut_conn.reuse_address := true;
      log("Connect to UT: ", v_ut_conn.remote_name, ":", v_ut_conn.remote_port, " from local Port: ", v_ut_conn.local_port);

      var Result vl_result := UTasp_CtrlFunct.f_UT_IPL4_connect(UT_PCO, v_ut_conn.remote_name, v_ut_conn.remote_port, v_ut_conn.local_name, v_ut_conn.local_port, -1, {tcp := {}}, {{reuseAddress := {enable := v_ut_conn.reuse_address}}});

      if (not(ispresent(vl_result.connId)))
      {
        v_ut_conn.id := -1;
        v_ut_conn.tcp_state := Disconnected;
        v_connectState := false;
      } else {
        v_ut_conn.id := vl_result.connId;
        v_ut_conn.tcp_state := Connected;
        // TODO: how to get the message length of a UT message? lengthof(bytestream) ?
        //var f_IPL4_getMsgLen getMsg_Func := refers(f_GetMsgLengthMQTT);
        //f_IPL4_setGetMsgLen(UT_PCO, v_cid, getMsg_Func, {});

        vl_ut_idx := v_ut_conn.id;
        vl_ut_connections[vl_ut_idx] := v_ut_conn;
      }

      return v_connectState;
    }

    // TODO: move this function to upper_tester
    private function f_disconnect_ut() runs on MQTT_Broker_MTC
    {
      var Result vl_result;

      log("Closing Upper Tester connection " & int2str(vl_ut_idx));
      if (vl_ut_idx >= 0)
      {
        vl_result := UTasp_CtrlFunct.f_UT_IPL4_close(UT_PCO, vl_ut_idx);
        unmap(self:UT_PCO, system:UT_PCO);
      }
    }
  } // group Broker

  group Client
  {

    /*
    * @desc initialize the whole MQTT Client Test System
    */
    function f_init_client_system(inout MQTT_Client_MTC p_ptc_1, inout MQTT_Client_MTC p_ptc_2) system MQTT_Client_TestSystem
    return BooleanReturnType
    {
      var BooleanReturnType v_init_ptc_1, v_init_ptc_2;

      map(p_ptc_1:MQTT_PCO, system:mqtt_client_1)
      map(p_ptc_2:MQTT_PCO, system:mqtt_client_2)

      p_ptc_1.start(f_init_client(0));
      p_ptc_2.start(f_init_client(1));

      // wait until clients initialized and store the init state
      p_ptc_1.done(BooleanReturnType : ?) -> value v_init_ptc_1
      p_ptc_2.done(BooleanReturnType : ?) -> value v_init_ptc_2

      if(v_init_ptc_1 and v_init_ptc_2)
      {
        return true
      }
      else
      {
        return false
      }
    }

    /*
    * @desc initialize the whole MQTT Client Test System
    */
    function f_init_client_security_system(MQTT_Client_List p_clients, MQTT_Client_MTC p_probe) system MQTT_Client_SecurityTestSystem
    return BooleanReturnType
    {
      var integer v_clients_len := lengthof(p_clients)
      var BooleanReturnType v_init_ptc;

      for(var integer i := 0; i < v_clients_len; i := i + 1)
      {
        var MQTT_Client_MTC v_cc := p_clients[i]  // current client within loop

        // map manually for now
        if(i == 0) {
          map(v_cc:MQTT_PCO, system:mqtt_attacker_0)
        }
        else if(i == 1) {
          map(v_cc:MQTT_PCO, system:mqtt_attacker_1)
        }
        else if(i == 2) {
          map(v_cc:MQTT_PCO, system:mqtt_attacker_2)
        }
        else if(i == 3) {
          map(v_cc:MQTT_PCO, system:mqtt_attacker_3)
        } else {
          log("[Clear MTC]: cannot map ", v_cc)
          return false
        }

        v_cc.start(f_init_client(0));
        v_cc.done(BooleanReturnType : ?) -> value v_init_ptc
        if(not v_init_ptc) { return false }
      }

      map(p_probe:MQTT_PCO, system:mqtt_probe_client)
      p_probe.start(f_init_client(1))
      p_probe.done(BooleanReturnType : ?) -> value v_init_ptc

      return v_init_ptc
    }

    /*
    * @desc initialize one single MQTT Client
    */
    function f_init_client(in integer p_client_idx) runs on MQTT_Client_MTC
    return BooleanReturnType
    {
      if(p_client_idx < 0 or p_client_idx >= lengthof(PX_CLIENTS))
      {
        log("Client Index ", p_client_idx, " is out of range")
        setverdict(inconc, "Initialization failed: check your config")
        return false
      }

      connection := {
        ipl4 := {
          id := -1,
          remote_name := PX_SUT_HOSTNAME,
          remote_port := PX_SUT_PORT,
          local_name := PX_LOCAL_HOST_ADDRESS,
          local_port := -1,
          reuse_address := PX_REUSE_ADDRESS,
          tcp_state := Disconnected
        },
        client_state := Disconnected
      }

      credentials := PX_CLIENTS[p_client_idx]

      return true
    }

    /*
    * @desc clean up the whole MQTT Client Test System
    */
    function f_clear_client_system(inout MQTT_Client_MTC p_ptc_1, inout MQTT_Client_MTC p_ptc_2) system MQTT_Client_TestSystem
    return BooleanReturnType
    {
      var BooleanReturnType v_clear_ptc_1, v_clear_ptc_2;

      p_ptc_1.start(f_clear_client())
      p_ptc_2.start(f_clear_client())

      // wait until clients initialized and store the init state
      p_ptc_1.done(BooleanReturnType : ?) -> value v_clear_ptc_1
      p_ptc_2.done(BooleanReturnType : ?) -> value v_clear_ptc_2
      all component.kill

      unmap(p_ptc_1:MQTT_PCO, system:mqtt_client_1)
      unmap(p_ptc_2:MQTT_PCO, system:mqtt_client_2)

      return true
    }

    function f_clear_client_security_system(MQTT_Client_List p_clients, MQTT_Client_MTC p_probe) system MQTT_Client_SecurityTestSystem
    return BooleanReturnType
    {
      var integer v_clients_len := lengthof(p_clients)
      var BooleanReturnType v_clear_ptc;

      for(var integer i := 0; i < v_clients_len; i := i + 1)
      {
        var MQTT_Client_MTC v_cc := p_clients[i]  // current client within loop
        log("[Clear MTC]: ", v_cc)
        // map manually for now
        if(i == 0) {
          unmap(v_cc:MQTT_PCO, system:mqtt_attacker_0)
        }
        else if(i == 1) {
          unmap(v_cc:MQTT_PCO, system:mqtt_attacker_1)
        }
        else if(i == 2) {
          unmap(v_cc:MQTT_PCO, system:mqtt_attacker_2)
        }
        else if(i == 3) {
          unmap(v_cc:MQTT_PCO, system:mqtt_attacker_3)
        } else {
          log("[Clear MTC]: cannot unmap ", v_cc)
          return false
        }

        var BooleanReturnType v_clear_ptc_2 := false

        v_cc.start(f_clear_client());
        v_cc.done(BooleanReturnType : ?) -> value v_clear_ptc_2
        if(not v_clear_ptc_2) { return false }
      }

      unmap(p_probe:MQTT_PCO, system:mqtt_probe_client)
      p_probe.start(f_clear_client())
      p_probe.done(BooleanReturnType : ?) -> value v_clear_ptc

      return v_clear_ptc
    }

    /*
    * @desc clean up one single MQTT Client
    */
    function f_clear_client() runs on MQTT_Client_MTC
    return BooleanReturnType
    {
      // TODO: any further clean up required?
      //f_send_disconnect(true);
      return true
    }
  } // group Client

} // module
