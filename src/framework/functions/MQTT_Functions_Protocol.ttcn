/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/
module MQTT_Functions_Protocol
{
  import from MQTT_TestSystem_Common all;

  import from MQTT_Templates_MQTTasp all;
  import from MQTT_Templates_CONNECT all;
  import from MQTT_Templates_CONNACK all;
  import from MQTT_Templates_PUBLISH all;
  import from MQTT_Templates_PUBACK all;
  import from MQTT_Templates_PUBREC all;
  import from MQTT_Templates_PUBREL all;
  import from MQTT_Templates_PUBCOMP all;
  import from MQTT_Templates_SUBSCRIBE all;
  import from MQTT_Templates_SUBACK all;
  import from MQTT_Templates_UNSUBSCRIBE all;
  import from MQTT_Templates_UNSUBACK all;
  import from MQTT_Templates_PINGREQ all;
  import from MQTT_Templates_PINGRESP all;
  import from MQTT_Templates_DISCONNECT all;

  import from MQTT_Pixits all;
  import from MQTT_Broker_Pixits all;
  import from MQTTasp_PortType all;
  import from MQTTasp_Types all;

  import from MQTTasp_CtrlFunct all;
  import from MQTT_Functions_Network all;

  import from MQTT_v3_1_1_Types all;
  import from IPL4asp_Types all;


  /*
  * @see http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718021
  *
  * @desc Broker PTC functions for MQTT publish and all delivery assurance packets
  *
  * @remark   Direction: Client <-> Server
  */
  group Publish_Functions
  {
    /*
     * @desc response with a PUBLISH
     */
    function f_send_publish(MQTT_Connection p_conn, MQTT_v3_1_1_Publish p_publish) runs on MQTT_MTC
    {
      var QoS v_qos_level := p_publish.header.qos_level
      var template MQTT_v3_1_1_Message v_message := {msg := { publish := p_publish }}

      if(v_qos_level == AT_MOST_ONCE_DELIVERY)
      {
        // Fire and forget, no other actions required
        f_send_mqtt(p_conn, v_message)
      }
      else if(v_qos_level == AT_LEAST_ONCE_DELIVERY)
      {
        // send and wait for PUBACK
        f_send_publish_qos_1(p_conn, v_message)
      }
      else if(v_qos_level == EXACTLY_ONE_DELIVERY)
      {
        // send and perform PUBREC / PUBREL / PUBCOMP
        f_send_publish_qos_2(p_conn, v_message)
      }
    }

    private function f_send_publish_qos_1(MQTT_Connection p_conn, template MQTT_v3_1_1_Message p_publish) runs on MQTT_MTC
    {
      f_send_mqtt(p_conn, p_publish)

      var integer v_packet_id := valueof(p_publish).msg.publish.packet_identifier
      timer t_timeout := PX_MAX_RESPONSE_TIME;
      t_timeout.start
      alt {
        [] MQTT_PCO.receive(mw_mqtt_message(mw_puback_packet_id(v_packet_id))) {
          log("received correct PUBACK")
          break;
        }
        [] MQTT_PCO.receive(mw_mqtt_message(mw_puback)) {
          log("received wrong PUBACK")
          // no break! wait for timeout or correct puback!
        }
        [] t_timeout.timeout {
          log("wait for PUBACK timed out")
          break;
        }
      }
    }

    private function f_send_publish_qos_2(MQTT_Connection p_conn, template MQTT_v3_1_1_Message p_publish) runs on MQTT_MTC
    {
      f_send_mqtt(p_conn, p_publish)

      var integer v_packet_id := valueof(p_publish).msg.publish.packet_identifier
      timer t_timeout := PX_MAX_RESPONSE_TIME;
      t_timeout.start
      alt {
        [] MQTT_PCO.receive(mw_mqtt_message(mw_pubrec_packet_id(v_packet_id))) {
          log("received correct PUBREC ")
          // send PUBREL as answer
          f_send_pubrel(p_conn, v_packet_id)

          // and wait for the PUBCOMP
          alt {
            [] MQTT_PCO.receive(mw_mqtt_message(mw_pubcomp_packet_id(v_packet_id))) {
              log("received correct PUBCOMP")
              break;
            }
            [] MQTT_PCO.receive(mw_mqtt_message(mw_pubcomp)) {
              log("received wrong PUBCOMP")
            }
            [] t_timeout.timeout {
              log("wait for PUBCOMP timed out")
              break;
            }
          }
          break;
        }
        [] MQTT_PCO.receive(mw_mqtt_message(mw_pubrec)) {
          log("received wrong PUBREC")
          // no break! wait for timeout or correct pubrec!
        }
        [] t_timeout.timeout {
          log("wait for PUBREC timed out")
        }
      }
    }

    /*
     * @desc response with a PUBACK
     */
    function f_send_puback(inout MQTT_Connection p_conn, integer p_packet_id)  runs on MQTT_MTC
    {
      var template MQTT_v3_1_1_Message vt_puback := m_puback(p_packet_id)

      // send PUBACK response
      log("[MQTT_MTC](>>>)(PUBACK): ", vt_puback)
      f_send_mqtt(p_conn, vt_puback)
    }

    /*
     * @desc response with a PUBREC
     */
    function f_send_pubrec(inout MQTT_Connection p_conn, integer p_packet_id) runs on MQTT_MTC
    {
      var template MQTT_v3_1_1_Message vt_pubrec := m_pubrec(p_packet_id)

      // send PUBREC response
      log("[MQTT_MTC](>>>)(PUBREC): ", vt_pubrec)
      f_send_mqtt(p_conn, vt_pubrec)
    }

    /*
     * @desc response with a PUBREL
     */
    function f_send_pubrel(inout MQTT_Connection p_conn, integer p_packet_id) runs on MQTT_MTC
    {
      var template MQTT_v3_1_1_Message vt_pubrel := m_pubrel(p_packet_id)

      // send PUBREL response
      log("[MQTT_MTC](>>>)(PUBREL): ", vt_pubrel)
      f_send_mqtt(p_conn, vt_pubrel)
    }

    /*
     * @desc response with a PUBCOMP
     */
    function f_send_pubcomp(inout MQTT_Connection p_conn, integer p_packet_id) runs on MQTT_MTC
    {
      var template MQTT_v3_1_1_Message vt_pubcomp := m_pubcomp(p_packet_id)

      // send PUBCOMP response
      log("[MQTT_MTC](>>>)(PUBCOMP): ", vt_pubcomp)
      f_send_mqtt(p_conn, vt_pubcomp)
    }

  } // group Publish_Functions

  /*
  * @see http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718021
  *
  * @desc group of common functions for broker and client
  *
  * @remark   runs on MQTT_MTC
  */
  group Common_Functions
  {
    /*
     * @desc send a generic MQTT message
     */
    function f_send_mqtt(inout MQTT_Connection p_conn, template MQTT_v3_1_1_Message p_msg) runs on MQTT_MTC
    {
      var template MQTTasp_Message vt_msg := m_mqtt_message_conn(p_msg, p_conn)

      // send response
      MQTT_PCO.send(valueof(vt_msg))
      //log("[MQTT_MTC](send)(MQTT Message): ", vt_msg)
    }
  } // group Common_Functions

  /*
  * @see http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718021
  *
  * @desc Broker PTC functions for MQTT request messages
  *
  * TODO: outsource the checking functions to own module?
  * @remark   Direction: Client <- Server
  */
  group PTC_Broker
  {
    /*
     * @desc response with a CONNACK
     */
    function f_send_connack(inout MQTT_Connection p_conn, integer p_return_code := 0) runs on MQTT_Broker_MTC
    {
      var template MQTT_v3_1_1_Message vt_connack := m_connack_rc(p_return_code)

      // send CONNACK response
      log("[MQTT_v4][exec]: {[MQTT-3.1.4-4]}")
      f_send_mqtt(p_conn, vt_connack)

      // set state to 'Connected'
      f_change_connection_client_state(p_conn, Connected)
    }

    /*
     * @desc response with a SUBACK
     */
    function f_send_suback(inout MQTT_Connection p_conn, integer p_packet_id, IntegerList p_return_codes) runs on MQTT_Broker_MTC
    {
      var template MQTT_v3_1_1_Message vt_suback := m_suback(p_packet_id, p_return_codes)

      // send SUBACK response
      log("[MQTT_Broker_MTC](>>>)(SUBACK): ", vt_suback)
      f_send_mqtt(p_conn, vt_suback)
    }

    /*
     * @desc response with a UNSUBACK
     */
    function f_send_unsuback(inout MQTT_Connection p_conn, integer p_packet_id) runs on MQTT_Broker_MTC
    {
      var template MQTT_v3_1_1_Message vt_unsuback := m_unsuback(p_packet_id)

      // send UNSUBACK response
      log("[MQTT_Broker_MTC](>>>)(UNSUBACK): ", vt_unsuback)
      f_send_mqtt(p_conn, vt_unsuback)
    }

    /*
     * @desc response with a PINGRESP
     */
    function f_send_ping_resp(inout MQTT_Connection p_conn) runs on MQTT_Broker_MTC
    {
      var template MQTT_v3_1_1_Message vt_ping_response := m_pingresp

      // send PINGRESP response
      log("[MQTT_Broker_MTC](>>>)(PINGRESP): ", vt_ping_response)
      f_send_mqtt(p_conn, vt_ping_response)
    }

    /*
     * @desc disconnect all active mqtt connections from broker
     * @mark the broker does NOT send a DISCONNECT but rather terminates the underlying IPL4 connection
     * @see http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718021
     */
     function f_disconnect_all() runs on MQTT_Broker_MTC
     {
       log("[DISCONNECT](Disconnect all active MQTT connections)")

       for (var integer i := lengthof(vl_connections); i > 0 ; i := i - 1) {
         if (ispresent(vl_connections[i])) {
           var MQTT_Connection v_mqtt_con := vl_connections[i]
           var integer v_ipl4_con_id := v_mqtt_con.ipl4.id
           f_ipl4_close(v_ipl4_con_id)
         }
       }
     }

     /*
      * covers [MQTT-3.1.2-2], [MQTT-3.1.4-5], [MQTT-3.2.2-5]
      */
     function f_unacceptable_protocol(inout MQTT_Connection p_conn) runs on MQTT_Broker_MTC
     {
       log("[MQTT_v4][exec]: {[MQTT-3.1.2-2], [MQTT-3.1.4-5], [MQTT-3.2.2-5]}")
       f_send_connack(p_conn, 1)
       f_ipl4_close(p_conn.ipl4.id)
     }

     function f_terminate_due_invalid_header(inout MQTT_Connection p_conn) runs on MQTT_MTC
     {
       log("[MQTT_v4][exec]: {[MQTT-2.2.2-2]}")
       f_terminate_due_to_violation(p_conn)
     }

     /*
      * hides f_ipl4_close from user and enables logging of [MQTT-4.8.0-1] on each termination
      */
     function f_terminate_due_to_violation(inout MQTT_Connection p_conn) runs on MQTT_MTC
     {
       log("[MQTT_v4][exec]: {[MQTT-4.8.0-1]}")
       f_ipl4_close(p_conn.ipl4.id)
     }
  } // group PTC_Broker

  /*
  * @see http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718021
  *
  * @desc Broker PTC functions for MQTT response messages
  *
  * @remark   Direction: Client <- Server
  */
  group Client_Functions
  {
    /*
     * @desc response with a CONNECT
     */
    function f_send_connect(inout MQTT_Connection p_conn) runs on MQTT_Client_MTC
    {
      // TODO: implement
      log("[NOIMPL](f_connect_request)")
    }

    /*
     * @desc response with a SUBSCRIBE
     */
    function f_send_subscribe(inout MQTT_Connection p_conn, MQTT_v3_1_1_Subscribe p_subscribe) runs on MQTT_Client_MTC
    {
      var template MQTT_v3_1_1_Message v_message := {msg := { subscribe := p_subscribe }}

      f_send_mqtt(p_conn, v_message)
    }

    /*
     * @desc the client sends a DISCONNECT notification and closes the IPL4 connection
     * @see http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc385349355
     */
    function f_send_disconnect() runs on MQTT_Client_MTC
    {
      if(ispresent(connection.client_state) and connection.client_state != Disconnected) {
        log("[DISCONNECT](Send Disconnect Request): ", connection)
        var template MQTTasp_Message v_disc_req := m_mqtt_message_conn(m_disconnect, connection)
        MQTT_PCO.send(valueof(v_disc_req))

        connection.client_state := Disconnected;
      } else {
        log("[DISCONNECT](Not possible for): ", connection);
      }

      if(connection.ipl4.tcp_state != Disconnected) {
        log("[DISCONNECT](Close IPL4 for): ", connection);
        f_IPL4_close(MQTT_PCO, connection.ipl4.id);
        connection.ipl4.tcp_state := Disconnected;
      }
    }

  } // group Client_Functions

} // module
