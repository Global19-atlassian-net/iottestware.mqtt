/*******************************************************************************
 * Copyright (c) 2018 Relayr GmbH
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Alexander Kaiser
 *   Sascha Hackel
 *   Axel Rennoch
 *******************************************************************************/
module MQTT_Functions_Conformance
{
  import from MQTT_TestSystem_Common all;
  import from MQTT_v3_1_1_Types all;

  import from MQTT_Templates_MQTTasp all;
  import from MQTT_Templates_CONNECT all;
  import from MQTT_Templates_CONNACK all;
  import from MQTT_Templates_PUBLISH all;
  import from MQTT_Templates_PUBACK all;
  import from MQTT_Templates_PUBREC all;
  import from MQTT_Templates_PUBREL all;
  import from MQTT_Templates_PUBCOMP all;
  import from MQTT_Templates_SUBSCRIBE all;
  import from MQTT_Templates_SUBACK all;
  import from MQTT_Templates_UNSUBSCRIBE all;
  import from MQTT_Templates_UNSUBACK all;
  import from MQTT_Templates_PINGREQ all;
  import from MQTT_Templates_PINGRESP all;
  import from MQTT_Templates_DISCONNECT all;

  import from MQTT_Broker_Pixits all;

  // Helpers
  import from UTF8_Helper all;

  // TODO: structure all functions for checking conformance bahaviour here
  // those functions wrap MQTT_Functions_Protocol and MQTT_Functions_Network
  // a valid Test Case should usually use only these functions which will give a logfile with all
  // checked and executed conformance statements

  /*
   * @see [MQTT-2.2.2-1]
   */
  function f_header_flags_valid(Header p_header, template Header p_exp_header) return boolean
  {
    log("[MQTT_v4][checked]: {[MQTT-2.2.2-1]}")
    if(match(p_header, p_exp_header))
    {
      return true
    } else {
      return false
    }
  }

  function f_connect_flags_valid(MQTT_v3_1_1_ConnectFlags p_connect_flags, template MQTT_v3_1_1_ConnectFlags p_exp) return boolean
  {
    // TODO: which conformance statement is covered?
    if(f_connect_flags_reserved_valid(p_connect_flags))
    {
      if(match(p_connect_flags, p_exp))
      {
        return true
      } else {
        return false
      }
    } else {
      return false
    }
  }

  /*
  * @see [MQTT-3.1.2-3]
  */
  function f_connect_flags_reserved_valid(MQTT_v3_1_1_ConnectFlags p_connect_flags) return boolean
  {
    log("[MQTT_v4][checked]: {[MQTT-3.1.2-3]}")
    if(match(p_connect_flags, mdw_connect_reserved_flag('0'B)))
    {
      return true
    } else {
      return false
    }
  }

  function f_connect_protocol_name_valid(MQTT_v3_1_1_Connect p_msg) return boolean
  {
    log("[MQTT_v4][checked]: {[MQTT-3.1.2-1]}")
    if (match(p_msg, mw_connect_msg_protocol_name))
    {
      return true
    } else {
      return false
    }
  }

  function f_connect_protocol_lvl_valid(MQTT_v3_1_1_Connect p_msg) return boolean
  {
    log("[MQTT_v4][checked]: {[MQTT-3.1.2-2]}")
    if (match(p_msg, mw_connect_msg_protocol_level)) {
      return true
    } else {
      return false
    }
  }

  /*
   * check if the given Client ID is valid
   * see [MQTT-1.5.3-1], [MQTT-1.5.3-2], [MQTT-3.1.3-4], [MQTT-3.1.3-5]
   */
  function f_client_id_valid(UTF8EncodedString p_client_id) return boolean
  {
    // check UTF-8
    log("[MQTT_v4][checked]: {[MQTT-1.5.3-1], [MQTT-1.5.3-2], [MQTT-3.1.3-4]}")
    var boolean v_return := f_is_valid_utf8(p_client_id)

    // check length and characters
    // Note: [MQTT-3.1.3-5] vs. [MQTT-3.1.3-6] and [MQTT-3.1.3-7]?
    log("[MQTT_v4][checked]: {[MQTT-3.1.3-5]}")
    if(p_client_id.stringLength < 1) { v_return := false }
    if(not PX_ALLOW_LONG_CLIENT_IDS)
    {
      if(p_client_id.stringLength > 23) { v_return := false }
    }

    if(not PX_ALLOW_SPECIAL_CHAR_CLIENT_IDS)
    {
      // range borders of the defined list of characters in [MQTT-3.1.3-5]
      // Note: ASCII and UTF-8 are equivalent in this range
      const integer c_ascii_0 := 48
      const integer c_ascii_9 := 57
      const integer c_ascii_A := 65
      const integer c_ascii_Z := 90
      const integer c_ascii_a := 97
      const integer c_ascii_z := 122

      var integer v_string_length := lengthof(p_client_id.stringItem);
      for(var integer i := 0; i < v_string_length; i := i + 1)
      {
        // get one single UTF-8 char from string and convert to decimal code point
        var integer v_dec_cp := unichar2int(substr(p_client_id.stringItem, i, 1))

        // check if the current character is in one the segments
        if(v_dec_cp < c_ascii_0 or c_ascii_0 > c_ascii_z)
        {
          v_return := false
        }
        else if(v_dec_cp > c_ascii_9 and v_dec_cp < c_ascii_A)
        {
          v_return := false
        }
        else if(v_dec_cp > c_ascii_Z and v_dec_cp < c_ascii_a)
        {
          v_return := false
        }
      }
    }

    return v_return
  }

  /*
   * check if the given Topic is valid (check only UTF-8 ?)
   * see [MQTT-3.1.3-10], [MQTT-4.7.1-1]
   *
   * @param p_topic is the topic name or filter
   * @param p_is_name defines if the p_topic is a Topic Name or Topic Filter
   */
  function f_topic_valid(UTF8EncodedString p_topic, boolean p_is_name := true) return boolean
  {
    // check UTF-8
    log("[MQTT_v4][checked]: {[MQTT-3.1.3-10]}")
    if(not f_is_valid_utf8(p_topic)) { return false }

    // check if topic contains spaces; conformance statement?
    var template charstring mw_wildcard_space := "((*)(\s)(*))"
    var universal charstring v_reg := regexp(p_topic.stringItem, mw_wildcard_space, 0)
    if(v_reg != "")
    {
      log("Topic name contains spaces")
      return false
    }

    // check if topic contains wildcards
    log("[MQTT_v4][checked]: {[MQTT-4.7.1-1]}")
    var template charstring mw_wildcard_pattern := "((*)([\#]|[\+])(*))"
    v_reg := regexp(p_topic.stringItem, mw_wildcard_pattern, 0)
    if(v_reg != "")
    {
      //log("Topic contains wildcard")
      // topic names MUST NOT contain wildcards
      if(p_is_name) { return false }

      // does topic filter contain invalid multi-level wildcards
      log("[MQTT_v4][checked]: {[MQTT-4.7.1-2]}")
      var template charstring mw_wildcard_multi_neg := "((*[\#][/]?+)|(*[\#][\w]?+)|(*[\w][\#]))"
      v_reg := regexp(p_topic.stringItem, mw_wildcard_multi_neg, 0)
      if(v_reg != "") { return false }

      // TODO: check single-level wildcards 
    }

    return true
  }

  /*
   * check if the given Username is valid (check only UTF-8 ?)
   * see [MQTT-3.1.3-11]
   */
  function f_username_valid(UTF8EncodedString p_username) return boolean
  {
    // check UTF-8
    log("[MQTT_v4][checked]: {[MQTT-3.1.3-11]}")
    var boolean v_return := f_is_valid_utf8(p_username)

    return v_return
  }

  /*
   * see [MQTT-3.14.1-1]
   */
  function f_disconnect_header_valid(Header p_header) return boolean
  {
    log("[MQTT_v4][checked]: {[MQTT-3.14.1-1]}")
    return f_header_flags_valid(p_header, mw_disconnect_header)
  }

  /*
   * TODO
   */
  function f_publish_header_valid(MQTT_v3_1_1_PublishHeader p_header) return boolean
  {
    if(match(p_header, mdw_publish_header_qos(AT_MOST_ONCE_DELIVERY)))
    {
      // QoS == 0: check the DUP flag
      log("[MQTT_v4][checked]: {[MQTT-3.3.1-2]}")
      if(p_header.dup_flag == '1'B) { return false }
    }

    log("[MQTT_v4][checked]: {[MQTT-3.3.1-4]}")
    if(match(p_header, mdw_publish_header_qos(RESERVED)))
    {
      return false
    }

    // TODO: further checkings!
    return true
  }
}
