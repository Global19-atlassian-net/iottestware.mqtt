Package mts_mqtt_commons {
    Domain {
        pics:
        - PICS_BROKER_BASIC     // Minimum each Broker should provide
        - PICS_BROKER_QOS_1     // QoS 1 is required
        - PICS_BROKER_QOS_2     // QoS 2 is required
        - PICS_BROKER_LWT       // Last Will Testament
        - PICS_BROKER_RTND      // Retained Messages (also includes clean sessions)
        - PICS_BROKER_AUTH      // Authentication
        - PICS_CLIENT_BASIC
        - PICS_CLIENT_QOS_1
        - PICS_CLIENT_QOS_2
        ;
        entities:
        - IUT
        - CLIENT
        - CLIENT_1
        - CLIENT_2
        - CLIENT_ID
        - MQTT_CONNECTION
        - SUBSCRIPTION
        - CLEAN_SESSION
        - TCP_CONNECTION
        - RETAIN_TOPIC
        - TEST_SYSTEM
        ;
        events:
        - receives
        - drops
        - awaits
        - sends
        - closes
        - having
        - published
        - delivered   // published with QoS > 0 and performed PUBACK / PUBREC / PUBREL / PUBCOMP
        - subscribed
        - checks_that
        ;
    }

    Data {
        type QoS;
        type UTF8String;
        type UTF8String_invalid;
        type Int16;
        type Octetstring;

        // Quality of Services
        QoS AT_MOST_ONCE;   // '00'B = 0
        QoS AT_LEAST_ONCE;  // '01'B = 1
        QoS EXACTLY_ONCE;   // '10'B = 2
        QoS VALID_QOS;		// [0..2]
        QoS INVALID_QOS;    // '11'B = 3

        // ####################
        // Test Suite constants

        // client identifiers
        UTF8String VALID_CLIENT_ID;          // [1..23] encoded Bytes
        UTF8String CLIENT_ID_24_BYTES;       // invalid: 24 encoded Bytes
        UTF8String CLIENT_ID_ZERO_BYTES;     // invalid: 0 encoded Bytes
        UTF8String CLIENT_ID_NON_ALPHA_NUM;  // invalid: contains non alpha-numeric chars
        UTF8String_invalid CLIENT_ID_D800;   // invalid: contains non-UTF8 chars: U+D800
        UTF8String_invalid CLIENT_ID_0000;   // invalid: contains non-UTF8 chars: U+0000

        // packet identifier
        Int16 PACKET_ID;      // valid packet id
        Int16 PACKET_ID_1;    // valid packet id
        Int16 PACKET_ID_2;    // required for TPs where packet IDs need to be distinguished
        Int16 PACKET_ID_3;
        Int16 PACKET_ID_ZERO; // invalid packet id = 0x00

        // invalid MQTT credentials
        UTF8String MQTT_USER_NAME_INVALID;              // invalid user name from application perspective
        UTF8String MQTT_PASSWORD_INVALID;               // invalid password from application perspective
        UTF8String_invalid MQTT_USER_NAME_INVALID_UTF8; // contains non-UTF8 chars: U+D800 U+0000 U+D8FFF

        // topics and topic filters
        UTF8String TOPIC_FILTER_VALID;              // valid topic filter should also match the PIXIT TOPIC
        UTF8String TOPIC_FILTER_SINGLE_LEVEL;       // valid topic filter with single level wild card e.g. abc/+/def
        UTF8String TOPIC_FILTER_MULTI_LEVEL;        // valid topic filter with multi level wild card e.g. abc/def/#
        UTF8String TOPIC_FILTER_INVALID;            // invalid topic filter according to MQTT: e.g. abc/#/def
        UTF8String TOPIC_NAME_VALID;                // valid topic name according to spec. (e.g. no wildcards)
        UTF8String TOPIC_NAME_INVALID;              // valid UTF-8 but invalid topic name (e.g. contains wildcards)
        UTF8String_invalid TOPIC_NAME_INVALID_UTF8; // invalid: general invalid UTF-8 topic name
        UTF8String_invalid WILL_TOPIC_D800;         // invalid: contains non-UTF8 chars: U+D800
        UTF8String_invalid WILL_TOPIC_0000;         // invalid: contains non-UTF8 chars: U+0000
        UTF8String_invalid TOPIC_FILTER_D800;       // invalid: contains non-UTF8 chars: U+D800
        UTF8String_invalid TOPIC_FILTER_0000;       // invalid: contains non-UTF8 chars: U+0000

        UTF8String USER_NAME_VALID_UTF8;

        // payloads and messages
        //UTF8String RETAINED_MESSAGE; -> obsolete
        //UTF8String WILL_MESSAGE_VALID; -> obsolete
        UTF8String UTF8_MESSAGE_VALID;
        Octetstring PAYLOAD;
        Octetstring PAYLOAD_2;               // alternative PAYLOAD if required to distinguish to PAYLOAD
        Octetstring PAYLOAD_ZERO_BYTE;       // zero byte PAYLOAD has special semantic for retained messages
        UTF8String PROTOCOL_NAME;            // MUST be MQTT
        UTF8String PROTOCOL_NAME_INVALID;    // MUST be != PROTOCOL_NAME

        // ######
        // PIXITS
        UTF8String PX_PUBLISH_TOPIC;
        UTF8String PX_SUBSCRIBE_TOPIC_FILTER;
        UTF8String PX_WILL_TOPIC;
        UTF8String PX_WILL_MESSAGE;
        UTF8String PX_CLIENT_ID;
        UTF8String PX_MQTT_USER_NAME;
        UTF8String PX_MQTT_PASSWORD;
    }
}
