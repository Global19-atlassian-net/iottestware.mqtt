Package mts_tst_mqtt {

  import all from mts_mqtt_commons;

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_001

    Test objective
    "The IUT MUST close the network connection if fixed header flags in CONNECT Control Packet are invalid"
    Reference
      "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
      when {
          the IUT entity receives a CONNECT message containing
          header_flags indicating value '1111'B;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_002

    Test objective
    "If the Protocol Name is incorrect the IUT MAY disconnect the Client or it MAY continue processing the CONNECT packet."
    Reference
      "[MQTT-3.1.2-1], [MQTT-3.1.4-4]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME_INVALID,
            protocol_level indicating value 0x04;
        } then {
            the IUT entity closes the TCP_CONNECTION

            // TODO: missing in TTCN-3 Implementation
            or the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_003

    Test objective
    "The IUT MUST respond to Protocol Levels which it supports (in scope: MQTT-3.1.1) with return code 0x00"
    Reference
      "[MQTT-3.1.2-2], [MQTT-3.1.4-4]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04;
        } then {
            the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_004

    Test objective
    "The IUT MUST validate that the reserved flag in the CONNECT Control Packet is set to zero and disconnect the Client if it is not zero"
    Reference
      "[MQTT-3.1.2-3], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                reserved_field indicating value '1'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_005

    Test objective
    "If the Will Flag is set to 1, the Will QoS and Will Retain fields in the Connect Flags will be used by the IUT, and the Will Topic and Will Message fields MUST be present in the payload."
    Reference
      "[MQTT-3.1.2-9], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value omit,
                will_message indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_006

    Test objective
    "If the Will Flag is set to 0 the Will QoS and Will retain fields in the Connect Flags MUST be set to zero and the Will Topic and Will Message fields MUST NOT be present in the payload."
    Reference
      "[MQTT-3.1.2-11], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_LWT and PICS_BROKER_RTND

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '0'B,
                will_qos corresponding to AT_LEAST_ONCE,
                will_retain indicating value '1'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic corresponding to PX_WILL_TOPIC,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_007

    Test objective
    "If the Will Flag is set to 0, then the Will QoS MUST be set to 0"
    Reference
      "[MQTT-3.1.2-13], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '0'B,
                will_qos corresponding to AT_LEAST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_008

    Test objective
    "If the Will Flag is set to 1, the value of Will QoS can be 0, 1 or 2. It MUST NOT be 3"
    Reference
      "[MQTT-3.1.2-14], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to INVALID_QOS,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_009

    Test objective
    "If the Will Flag is set to 1, the value of Will QoS can be 0, 1 or 2."
    Reference
      "[MQTT-3.1.2-14], [MQTT-3.1.4-4]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_010

    Test objective
    "If the Will Flag is set to 0, then the Will Retain Flag MUST be set to 0"
    Reference
      "[MQTT-3.1.2-15], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '1'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value omit,
                will_message indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_011

    Test objective
    "If the Will Flag is set to 0, then the Will Retain Flag MUST be set to 0"
    Reference
      "[MQTT-3.1.2-15], [MQTT-3.1.4-4]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value omit,
                will_message indicating value omit;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_012

    Test objective
    "If the User Name Flag is set to 0, the Password Flag MUST be set to 0"
    Reference
      "[MQTT-3.1.2-22], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '0'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_013

    Test objective
    "If the user name flag is set to 0, a user name MUST NOT be present in the payload"
    Reference
      "[MQTT-3.1.2-18], [MQTT-3.1.2-22], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name corresponding to PX_MQTT_USER_NAME,
                password indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_014

    Test objective
    "If the User Name Flag is set to 1, a user name MUST be present in the payload"
    Reference
      "[MQTT-3.1.2-19], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '1'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name indicating value omit,
                password indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_015

    Test objective
    "If the Password Flag is set to 0, a password MUST NOT be present in the payload"
    Reference
      "[MQTT-3.1.2-20], [MQTT-3.1.2-22], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name indicating value omit,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_016

    Test objective
    "If the Password Flag is set to 1, a user password MUST be present in the payload"
    Reference
      "[MQTT-3.1.2-21], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name corresponding to PX_MQTT_USER_NAME,
                password indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_017

    Test objective
    "The IUT MUST allow ClientIDs which are between 1 and 23 UTF-8 encoded bytes in length"
    Reference
      "[MQTT-3.1.3-5], [MQTT-3.1.4-1]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '1'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_24_BYTES;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_018

    Test objective
    "The IUT MUST allow ClientIDs that contain only alphanumeric characters [0-9a-zA-Z]."
    Reference
      "[MQTT-3.1.3-5], [MQTT-3.1.4-1]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '1'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_NON_ALPHA_NUM;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_019

    Test objective
    "The IUT MAY allow a Client to supply a ClientId that has a length of zero bytes, however if it does so the IUT MUST treat this as a special case and assign a unique Client Identifier to that Client."
    Reference
      "[MQTT-3.1.3-6], [MQTT-3.1.3-7], [MQTT-3.1.4-4]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '1'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_ZERO_BYTES;
            ;
        } then {
            // TODO: Standards says: MAY allow
            the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_020

    Test objective
    "The ClientId MUST be a well-formed UTF-8 encoded String."
    Reference
      "[MQTT-1.5.3-1], [MQTT-3.1.3-4], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_D800;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_021

    Test objective
    "The ClientId MUST be a well-formed UTF-8 encoded String."
    Reference
      "[MQTT-1.5.3-2], [MQTT-3.1.3-4], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_0000;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_022

    Test objective
    "The Will Topic MUST be a UTF-8 encoded string"
    Reference
      "[MQTT-1.5.3-1], [MQTT-3.1.3-10], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value WILL_TOPIC_D800,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_023

    Test objective
    "The Will Topic MUST be a UTF-8 encoded string"
    Reference
      "[MQTT-1.5.3-2], [MQTT-3.1.3-10], [MQTT-3.1.4-1], [MQTT-3.2.2-6], [MQTT-4.7.3-2]"
    PICS Selection PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value WILL_TOPIC_0000,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_024

    Test objective
    "The wildcard characters can be used in Topic Filters, but MUST NOT be used within a Topic Name"
    Reference
    "[MQTT-4.7.1-1], [MQTT-3.1.4-1]"
    PICS Selection PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value TOPIC_FILTER_SINGLE_LEVEL,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_025

    Test objective
    "The wildcard characters can be used in Topic Filters, but MUST NOT be used within a Topic Name"
    Reference
    "[MQTT-4.7.1-1], [MQTT-3.1.4-1]"
    PICS Selection PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value TOPIC_FILTER_MULTI_LEVEL,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_026

    Test objective
    "The User Name MUST be a UTF-8 encoded string."
    Reference
      "[MQTT-1.5.3-1], [MQTT-3.1.3-11], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name corresponding to MQTT_USER_NAME_INVALID_UTF8,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    // TODO: differentiate MQTT_USER_NAME_INVALID_UTF8 to distinguish from CONNECT_025
    TP Id TP_MQTT_Broker_CONNECT_027

    Test objective
    "The User Name MUST be a UTF-8 encoded string."
    Reference
      "[MQTT-1.5.3-2], [MQTT-3.1.3-11], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"
    PICS Selection PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name corresponding to MQTT_USER_NAME_INVALID_UTF8,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_028

    Test objective
    "After a Network Connection is established by a Client to a Server, the first Packet sent from the Client to the Server MUST be a CONNECT Packet"
    Reference
    "[MQTT-3.1.0-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a TCP_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message
      } then {
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_029

    Test objective
    "The Server MUST process a second CONNECT Packet sent from a Client as a protocol violation and disconnect the Client"
    Reference
    "[MQTT-3.1.0-2]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a CONNECT message
      } then {
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_030

    Test objective
    "If the ClientId represents a Client already connected to the Server then the Server MUST disconnect the existing Client"
    Reference
    "[MQTT-3.1.4-2]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      payload containing
        client_identifier corresponding to PX_CLIENT_ID;
      ;
      to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a CONNECT message containing
        payload containing
            client_identifier corresponding to PX_CLIENT_ID;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity closes the TCP_CONNECT to the CLIENT_1 entity
        and
        the IUT entity sends a CONNACK message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNECT_031

    Test objective
    "All Topic Names MUST be at least one character long"
    Reference
      "[MQTT-4.7.3-1]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_LEAST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic corresponding to TOPIC_NAME_ZERO_CHARS,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_001

    Test objective
    "The IUT accepts only valid fixed header flags for CONNECT Control Packet and responds with CONNACK"
    Reference
      "[MQTT-2.2.2-1], [MQTT-3.1.4-4], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_002

    Test objective
    "If the IUT accepts a connection with CleanSession set to 1, the IUT MUST set SessionPresent to 0 in the CONNACK packet in addition to setting a zero-return code."
    Reference
      "[MQTT-3.2.2-1], [MQTT-3.1.4-4], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '1'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to VALID_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_003


    Test objective
    "If the IUT has stored session state, it MUST set session present flag to 1 in the CONNACK control packet."
    Reference
      "[MQTT-3.2.2-2], [MQTT-3.1.4-4], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
        the IUT entity having a present session for the CLIENT_ID entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '1'B,
            connect_return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_004

    // Summary
    Test objective
    "If the IUT does not have a stored session state, it MUST set session present flag to 0 in the CONNACK control packet."
    Reference
      "[MQTT-3.2.2-3], [MQTT-3.1.4-4], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_RTND


    Initial conditions
    with {
        the IUT entity having no present session for the CLIENT_ID entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_005

    // Summary
    Test objective
    "The IUT MUST respond to Protocol Levels which it does not support (in scope: MQTT-3.1.1) with return code 0x01"
    Reference
      "[MQTT-3.1.2-2], [MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0xFF,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x01;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_006

    // Summary
    Test objective
    "If the Client supplies a zero-byte Client Identifier with Clean Session set to 0, the IUT MUST respond to the CONNECT Control Packet with a CONNACK return code 0x02 and then close the Network Connection."
    Reference
      "[MQTT-3.1.3-8], [MQTT-3.1.3-9], [MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_RTND

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_ZERO_BYTES;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x02;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_007

    // Summary
    Test objective
    "The data in the username (or password) is malformed"
    Reference
      "[MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID,
                user_name corresponding to MQTT_USER_NAME_INVALID_UTF8,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x04;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

    Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_008

    // Summary
    Test objective
    "The client is not authorized to connect. Username is invalid"
    Reference
      "[MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID,
                user_name corresponding to MQTT_USER_NAME_INVALID,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x05;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_009

    // Summary
    Test objective
    "The client is not authorized to connect. Password is invalid"
    Reference
      "[MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID,
                user_name corresponding to PX_MQTT_USER_NAME,
                password corresponding to MQTT_PASSWORD_INVALID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x05;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  // TODO: possible to implement? TTCN-3 implementation returns always inconclusive here!
  Test Purpose {
    TP Id TP_MQTT_Broker_CONNACK_010

    // Summary
    Test objective
    "The Network Connection has been made but the MQTT service is unavailable"
    Reference
      "[MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the IUT entity having no available service for the MQTT_CONNECTION entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x03;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_001

    Test objective
    "The DUP flag MUST be set to 0 for all QoS 0 messages"
    Reference
    "[MQTT-3.3.1-2]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          dup_flag indicating value '1'B,
          qos_level corresponding to AT_MOST_ONCE;
        ;
      } then {
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_002

    Test objective
    "A PUBLISH packet MUST NOT have both QoS bits set to 1. QoS level corresponding to '11'B is considered invalid"
    Reference
    "[MQTT-2.2.2-1], [MQTT-3.3.1-4]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to INVALID_QOS;
        ;
      } then {
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_003

    Test objective
    "The Topic Name MUST be a UTF-8 encoded string and be present as the first field in the variable header"
    Reference
    "[MQTT-3.3.2-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_INVALID_UTF8;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_004

    Test objective
    "The Topic Name in the PUBLISH Packet MUST NOT contain multi-level wildcard characters"
    Reference
    "[MQTT-3.3.2-2], [MQTT-4.7.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_WC_MULTI_LVL;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_005

    Test objective
    "The Topic Name in the PUBLISH Packet MUST NOT contain single-level wildcard characters"
    Reference
    "[MQTT-3.3.2-2], [MQTT-4.7.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_WC_SINGLE_LVL;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_006

    Test objective
    "All Topic Names MUST be at least on character long"
    Reference
    "[MQTT-4.7.3-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_ZERO_CHARS;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_007

    Test objective
    "Topic Names MUST NOT include the null character (Unicode U+0000)"
    Reference
    "[MQTT-4.7.3-2], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_0000;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_008

    Test objective
    "In the QoS 0 delivery protocol, the Sender MUST send a PUBLISH packet with QoS=0, DUP=0."
    Reference
    "[MQTT-4.3.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          dup_flag indicating value '1'B,
          qos_level corresponding to AT_MOST_ONCE;
        ;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  /* Note: does it make sense to test this conformance statement here? */
  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_009

    Test objective
    "In the QoS 0 delivery protocol, a PUBLISH Packet MUST NOT contain a Packet Identifier"
    Reference
    "[MQTT-2.3.1-5], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_MOST_ONCE,
        packet_identifier corresponding to PACKET_ID;
        ;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_010

    Test objective
    "In case of QoS = 1 any PUBLISH Packet MUST contain a non-zero 16-bit Packet Identifier"
    Reference
    "[MQTT-2.3.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE,
        packet_identifier corresponding to PACKET_ID_ZERO;
        ;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBLISH_011

    Test objective
    "In case of QoS = 2 any PUBLISH Packet MUST contain a non-zero 16-bit Packet Identifier"
    Reference
    "[MQTT-2.3.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to EXACTLY_ONCE,
        packet_identifier corresponding to PACKET_ID_ZERO;
        ;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBACK_001

    Test objective
    "The IUT closes the network connection if fixed header flags in PUBACK Control Packet are invalid"
    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2]"
    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to AT_LEAST_ONCE;
        and
        the CLIENT_1 entity delivered a PUBLISH message containing
            qos_level corresponding to AT_LEAST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC;
        to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity sends a PUBLISH message containing
      header containing
        qos_level corresponding to AT_LEAST_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC;
      ;
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBACK message containing
      header_flags indicating value '1111'B;
      from the CLIENT_2 entity
      } then {
          the IUT entity closes the TCP_CONNECTION to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBREC_001

    Test objective
    "The IUT closes the network connection if fixed header flags in PUBREC Control Packet are invalid"
    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2]"
    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to EXACTLY_ONCE;
        and
        the CLIENT_1 entity delivered a PUBLISH message containing
            qos_level corresponding to EXACTLY_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC;
        to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity sends a PUBLISH message containing
      header containing
        qos_level corresponding to EXACTLY_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC;
      ;
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBREC message containing
      header_flags indicating value '1111'B;
      from the CLIENT_2 entity
      } then {
          the IUT entity closes the TCP_CONNECTION to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBREL_001

    Test objective
    "The IUT closes the network connection if fixed header flags in PUREL Control Packet are invalid"
    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.6.1-1]"
    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity receives a PUBLISH message containing
      header containing
        qos_level corresponding to EXACTLY_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC;;
      from the CLIENT_1 entity
      and
      the IUT entity sends a PUBREC message
      from the CLIENT_1 entity
      and
      the IUT entity receives a PUBREL message containing
      header_flags indicating value '1101'B;
      from the CLIENT_1 entity
      } then {
          the IUT entity closes the TCP_CONNECTION to the CLIENT_1 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_PUBCOMP_001

    Test objective
    "The IUT closes the network connection if fixed header flags in PUBCOMP Control Packet are invalid"
    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2]"
    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to EXACTLY_ONCE;
        and
        the CLIENT_1 entity delivered a PUBLISH message containing
            qos_level corresponding to EXACTLY_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC;
        to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity sends a PUBLISH message containing
      header containing
        qos_level corresponding to EXACTLY_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC;;
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBREC message
      from the CLIENT_2 entity
      and
      the IUT entity sends a PUBREL message
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBCOMP message containing
      header_flags indicating value '1111'B;
      from the CLIENT_2 entity
      } then {
          the IUT entity closes the TCP_CONNECTION to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_001

    Test objective
    "The IUT closes the network connection if fixed header flags in SUBSCRIBE Control Packet are invalid"
    Reference
      "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.8.1-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '1101'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_002

    Test objective
    "SUBSCRIBE Control Packet MUST contain a non-zero 16-bit Packet Identifier"
    Reference
      "[MQTT-2.3.1-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID_ZERO,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
                packet_identifier corresponding to PACKET_ID_ZERO;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_003

    Test objective
    "The Topic Filters in a Subscribe packet payload MUST be UTF-8 encoded strings. This data MUST NOT include encodings of code points between U+D800 and U+DFFF"
    Reference
      "[MQTT-1.5.3-1], [MQTT-3.8.3-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_D800,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_004

    Test objective
    "The Topic Filters in a Subscribe packet payload MUST be UTF-8 encoded strings. A UTF-8 encoded string MUST NOT include an encoding of the null character U+0000."
    Reference
      "[MQTT-1.5.3-2], [MQTT-3.8.3-1], [MQTT-4.7.3-2], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_0000,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_005

    Test objective
    "All Topic Filters MUST be at least one character long"
    Reference
      "[MQTT-4.7.3-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_ZERO_CHARS,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_006

    Test objective
    "The payload of a SUBSCRIBE packet MUST contain at least one Topic Filter/QoS pair."
    Reference
      "[MQTT-3.8.3-3], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_007

    Test objective
    "The upper 6 bits of the Requested QoS byte are reserved. Reserved bits for Requested QoS in the payload must be set to 0."
    Reference
      "[MQTT-3.8.3-4], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_MOST_ONCE,
                requested_qos_flags indicating value '111111'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_008

    Test objective
    "The Requested QoS in the payload MUST be 0, 1 or 2"
    Reference
      "[MQTT-3.8.3-4], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to INVALID_QOS;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_009

    Test objective
    "The multi-level wildcard character MUST be specified either on its own or following a topic level separator. In either case it MUST be the last character specified in the Topic Filter."
    Reference
      "[MQTT-4.7.1-2], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_MULTI_LEVEL_INVALID,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_SUBSCRIBE_010

    Test objective
    "The single-level wildcard can be used at any level in the Topic Filter, including first and last levels. Where it is used it MUST occupy an entire level of the filter."
    Reference
      "[MQTT-4.7.1-3], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_SINGLE_LEVEL_INVALID,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBACK_001

    Test objective
    "The IUT accepts only valid fixed header flags for SUBSCRIBE Control Packet and responds with SUBACK"
    Reference
      "[MQTT-2.2.2-1], [MQTT-3.8.1-1] "
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBACK_002

    Test objective
    "SUBSCRIBE (in case where QoS > 0) Control Packet MUST contain a non-zero 16-bit Packet Identifier"
    Reference
      "[MQTT-2.3.1-1], [MQTT-2.3.1-7], [MQTT-3.8.4-1], [MQTT-3.8.4-2]"
    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBACK_003

    Test objective
    "SUBACK return codes other than 0x00, 0x01, 0x02 and 0x80 are reserved and MUST NOT be used."
    Reference
      "[MQTT-3.9.3-1], [MQTT-3.9.3-2]"
    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBACK_004

    Test objective
    "SUBACK return codes other than 0x00, 0x01, 0x02 and 0x80 are reserved and MUST NOT be used."
    Reference
      "[MQTT-3.9.3-1], [MQTT-3.9.3-2]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_QOS_1

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x01;

            // Note: if the IUT supports only QoS 0
            or the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBACK_005

    Test objective
    "SUBACK return codes other than 0x00, 0x01, 0x02 and 0x80 are reserved and MUST NOT be used."
    Reference
      "[MQTT-3.9.3-1], [MQTT-3.9.3-2]"
    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_QOS_1 and PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to EXACTLY_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x02;

            // Note: if the IUT supports only up to QoS 1
            or the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x01;

            // Note: if the IUT supports only QoS 0
            or the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_SUBACK_006

    Test objective
    "SUBACK return codes other than 0x00, 0x01, 0x02 and 0x80 are reserved and MUST NOT be used."
    Reference
      "[MQTT-3.9.3-1], [MQTT-3.9.3-2]"
    PICS Selection PICS_BROKER_BASIC or PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_INVALID,
                requested_qos corresponding to AT_MOST_ONCE;    // TODO: check if QoS 2 necessary here!!
            ;
        } then {
            // Note: Specification not clear: not explicitly stating what "failed subscription" is.
            // see: https://github.com/erlio/vernemq/issues/72
            // see: https://groups.google.com/forum/#!topic/mqtt/ppdmL4-v2Yk
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x80;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBSCRIBE_001

    Test objective
    "The IUT closes the network connection if fixed header flags in UNSUBSCRIBE Control Packet are invalid"
    Reference
      "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.10.1-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '1101'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBSCRIBE_002

    Test objective
    "UNSUBSCRIBE Control Packet MUST contain a non-zero 16-bit Packet Identifier"
    Reference
      "[MQTT-2.3.1-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID_ZERO;
        } then {
            the IUT entity closes the TCP_CONNECTION

            // Note: response/behavior not explicitly described in the specification
            or the IUT entity sends a UNSUBACK message containing
            packet_identifier corresponding to PACKET_ID_ZERO;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBSCRIBE_003

    Test objective
    "The Topic Filters in an Unsubscribe packet payload MUST be UTF-8 encoded strings. This data MUST NOT include encodings of code points between U+D800 and U+DFFF"
    Reference
      "[MQTT-1.5.3-1], [MQTT-3.10.3-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_D800;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBSCRIBE_004

    Test objective
    "All Topic Filters MUST be at least one character long"
    Reference
      "[MQTT-4.7.3-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_ZERO_CHARS;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBSCRIBE_005

    Test objective
    "Topic Filters MUST NOT include the null character (Unicode U+0000)"
    Reference
      "[MQTT-4.7.3-2], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_0000;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBSCRIBE_006

    Test objective
    "The payload of a UNSUBSCRIBE packet MUST contain at least one Topic Filter."
    Reference
      "[MQTT-3.10.3-2], [MQTT-4.8.0-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBACK_001

    Test objective
    "The IUT accepts only valid fixed header flags for UNSUBSCRIBE Control Packet and responds with SUBACK"
    Reference
      "[MQTT-2.2.2-1], [MQTT-3.10.1-1] "
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B;
        } then {
            the IUT entity sends a UNSUBACK message containing
            header_flags indicating value '0000'B;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBACK_002

    Test objective
    "The IUT MUST respond to an UNSUBSCRIBE request by sending an UNSUBACK control packet. The UNSUBACK control packet MUST have the same Packet Identifier as the UNSUBSCRIBE Control Packet."
    Reference
      "[MQTT-3.10.4-4]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT entity subscribed the PX_PUBLISH_TOPIC containing
              qos_level corresponding to AT_MOST_ONCE;
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
              topic_filter corresponding to PX_PUBLISH_TOPIC;
            ;
        } then {
            the IUT entity sends a UNSUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBACK_003

    Test objective
    "Even where no Topic Subscriptions are deleted, the Server MUST respond with an UNSUBACK"
    Reference
      "[MQTT-3.10.4-5]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT entity not subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
              topic_filter corresponding to PX_PUBLISH_TOPIC;
            ;
        } then {
            the IUT entity sends a UNSUBACK message containing
            header_flags indicating value '0000'B;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_UNSUBACK_004

    Test objective
    "If a Server receives an UNSUBSCRIBE packet that contains multiple Topic Filters it MUST handle that packet as if it had received a sequence of multiple UNSUBSCRIBE packets, except that it sends just one UNSUBACK response"
    Reference
    "[MQTT-3.10.4-6]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
              topic_filter corresponding to PX_PUBLISH_TOPIC,
              topic_filter corresponding to TOPIC_FILTER_VALID; // second topic filter
            ;
        } then {
            the IUT entity sends a UNSUBACK message
            and
            the IUT entity sends no second UNSUBACK message
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_PINGREQ_001

    // Summary
    Test objective
    "The IUT closes the network connection if fixed header flags in PINGREQ Control Packet are invalid"
    Reference
      "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a PINGREQ message containing
            header_flags indicating value '1111'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_PINGRESP_001

    // Summary
    Test objective
    "The IUT accepts only valid fixed header flags for PINGREQ Control Packet and responds with a PINGRESP"
    Reference
      "[MQTT-2.2.2-1], [MQTT-3.12.4-1] "
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a PINGREQ message containing
            header_flags indicating value '0000'B;
        } then {
            the IUT entity sends a PINGRESP message containing
            header_flags indicating value '0000'B;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_DISCONNECT_001

    Test objective
    "The IUT MUST validate that reserved bits are set to zero and disconnect the Client if they are not zero."
    Reference
      "[MQTT-2.2.2-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a DISCONNECT message containing
            header_flags indicating value '0000'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_DISCONNECT_002

    Test objective
    "The IUT MUST validate that reserved bits are set to zero and disconnect the Client if they are not zero."
    Reference
      "[MQTT-2.2.2-2], [MQTT-3.14.1-1], [MQTT-4.8.0-1]"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a DISCONNECT message containing
            header_flags indicating value '1111'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  /* Note: remaining length does not have explicit conformance statements: reference section 2.2.3 within MQTT specification */
  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_REMLEN_001

    Test objective
    "The IUT MUST forward PUBLISH messages to according subscribers"
    Reference
      "MQTT 2.2.3"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
           the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
               qos_level corresponding to AT_MOST_ONCE;
           to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD;
            ;
            from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD;
            ;
            to the CLIENT_2 entity
      }
    }
  }

  /* Note: remaining length does not have explicit conformance statements: reference section 2.2.3 within MQTT specification */
  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_REMLEN_002

    Test objective
    "The IUT MUST forward PUBLISH messages to according subscribers. The payload is bigger and will require 2 bytes to encode remaining length"
    Reference
      "MQTT 2.2.3"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
           the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
               qos_level corresponding to AT_MOST_ONCE;
           to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_2;
            ;
            from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_2;
            ;
            to the CLIENT_2 entity
      }
    }
  }

  /* Note: remaining length does not have explicit conformance statements: reference section 2.2.3 within MQTT specification */
  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_REMLEN_003

    Test objective
    "The IUT MUST forward PUBLISH messages to according subscribers. The payload is bigger and will require 3 bytes to encode remaining length"
    Reference
      "MQTT 2.2.3"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
           the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
               qos_level corresponding to AT_MOST_ONCE;
           to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_3;
            ;
            from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_3;
            ;
            to the CLIENT_2 entity
      }
    }
  }

  /* Note: remaining length does not have explicit conformance statements: reference section 2.2.3 within MQTT specification */
  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_REMLEN_004

    Test objective
    "The IUT MUST forward PUBLISH messages to according subscribers. The payload is bigger and will require 4 bytes to encode remaining length"
    Reference
      "MQTT 2.2.3"
    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
           the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
               qos_level corresponding to AT_MOST_ONCE;
           to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_4;
            ;
            from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_4;
            ;
            to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_KEEPALIVE_001

    Test objective
    "If the Keep Alive value is non-zero and the Server does not receive a Control Packet from the Client within one and a half times the Keep Alive time period, it MUST disconnect the Network Connection to the Client as if the network had failed"
    Reference
    "[MQTT-3.1.2-24]"
    PICS Selection PICS_CLIENT_BASIC

    Initial conditions
    with {
       the CLIENT entity having a MQTT_CONNECTION to the IUT entity
       and
       the CLIENT entity established the MQTT_CONNECTION containing
       keep_alive corresponding to PX_KEEP_ALIVE;
    }

    Expected behaviour
    ensure that {
      when {
        the CLIENT entity times_out
      } then {
        the IUT entity closes the TCP_CONNECTION to the CLIENT entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_RTND_001

    Test objective
    "Retained messages do not form part of the Session state in the IUT, they MUST NOT be deleted when the Session ends"
    Reference
      "[MQTT-3.1.2-7]"
    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
        the IUT entity having a UTF8_MESSAGE_VALID in the RETAIN_TOPIC entity
        and
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT entity having a CLEAN_SESSION
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            return_code indicating value 0x00;

            and the IUT entity sends a PUBLISH message containing
            topic_name corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
            payload corresponding to UTF8_MESSAGE_VALID;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_RTND_002

    Test objective
    "If the Retain Flag is set to 1, in a PUBLISH Control Packet sent by a Client to the IUT, the IUT MUST store the Application Message and its QoS, so that It can be delivered to future subscribers."
    Reference
      "[MQTT-3.3.1-5], [MQTT-3.3.1-6], [MQTT-3.3.1-8]"
    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
           the CLIENT_1 entity published a Message containing
               dup_flag indicating value '0'B,
               qos_level corresponding to AT_LEAST_ONCE,
               retain_flag indicating value '1'B,
               topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_1,
            payload corresponding to PAYLOAD;
           to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            packet_identifier corresponding to PACKET_ID_2,
            payload containing
                topic_filter corresponding to PX_PUBLISH_TOPIC,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
            from the CLIENT_2 entity
        } then {
            the IUT entity sends a SUBACK message containing
            packet_identifier corresponding to PACKET_ID_2,
            payload containing
                return_code indicating value 0x00;
            ;
            to the CLIENT_2 entity

            and the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
                retain_flag indicating value '1'B,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_3,
            payload corresponding to PAYLOAD;
            ;
            to the CLIENT_2 entity
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_RTND_003

    // Summary
    Test objective
    "The IUT MUST set the Retain Flag to 0 when a PUBLISH Control Packet is sent to a Client because it matches an established subscription regardless of how the flag was set in the message it received."
    Reference
      "[MQTT-3.3.1-9]"
    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to AT_MOST_ONCE;
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_LEAST_ONCE,
                retain_flag indicating value '1'B,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_1,
            payload corresponding to PAYLOAD;
            ;
            from the CLIENT_1 entity
        } then {
            the IUT entity sends a PUBACK message containing
            packet_identifier corresponding to PACKET_ID_1;
            to the CLIENT_1 entity

            and the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
                retain_flag indicating value '0'B,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_2,
            payload corresponding to PAYLOAD;
            ;
            to the CLIENT_2 entity
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_RTND_004

    Test objective
    "A PUBLISH Packet with a RETAIN flag set to 1 and a payload containing zero bytes will be processed as normal by the Server and sent to Clients
    with a subscription matching the topic name. (Additionally any existing retained message with the same topic name MUST be removed and any
    future subscribers for the topic will not receive a retained message)"

    Reference
    "[MQTT-3.3.1-10]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to AT_MOST_ONCE;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD_ZERO_BYTE;
        ;
        from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '0'B,
        payload corresponding to PAYLOAD_ZERO_BYTE;
        ;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_RTND_005

    Test objective
    "(A PUBLISH Packet with a RETAIN flag set to 1 and a payload containing zero bytes will be processed as normal by the Server and sent to Clients
    with a subscription matching the topic name). Additionally any existing retained message with the same topic name MUST be removed and any
    future subscribers for the topic will not receive a retained message. A zero byte retained message MUST NOT be stored as a retained message on the Server."

    Reference
    "[MQTT-3.3.1-10], [MQTT-3.3.1-11]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD_ZERO_BYTE;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
          topic_filter corresponding to PX_PUBLISH_TOPIC,
          requested_qos corresponding to AT_MOST_ONCE;
        ;
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_RTND_006

    Test objective
    "If the RETAIN flag is 0, in a PUBLISH Packet sent by a Client to a Server, the Server MUST NOT store the message and
    MUST NOT remove or replace any existing retained message."

    Reference
    "[MQTT-3.3.1-12]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '0'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD_2;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
          topic_filter corresponding to PX_PUBLISH_TOPIC,
          requested_qos corresponding to AT_MOST_ONCE;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        payload corresponding to PAYLOAD;
        ;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_RTND_007

    Test objective
    "If the Server receives a QoS 0 message with the RETAIN flag set to 1 it MUST discard any message previously retained for that topic. It SHOULD store the new QoS 0 message as the new retained message for that topic, but MAY choose to discard it at any time - if this happens there will be no retained message for that topic."
    Reference
    "[MQTT-3.3.1-7]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_LEAST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD_2;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
          topic_filter corresponding to PX_PUBLISH_TOPIC,
          requested_qos corresponding to AT_MOST_ONCE;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        payload corresponding to PAYLOAD_2;
        ;
        to the CLIENT_2 entity
        or
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_LWT_001

    Test objective
    "The Will Message MUST be published when the Network Connection is subsequently closed unless the Will Message has been deleted by the Server on receipt of a DISCONNECT Packet"
    Reference
    "[MQTT-3.1.2-8]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_flag indicating value '1'B,
      payload containing
        will_topic corresponding to PX_PUBLISH_TOPIC,
        will_message corresponding to PX_WILL_MESSAGE;
      ;;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
      when {
        the CLIENT_1 entity closes the TCP_CONNECTION to the IUT entity
      } then {
        the IUT entity sends a PUBLISH message containing
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PX_WILL_MESSAGE;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_LWT_002

    Test objective
    "The Will Message MUST be removed from the stored Session state in the Server once it has been published or the Server has received a DISCONNECT packet from the Client"
    Reference
    "[MQTT-3.1.2-8], [MQTT-3.1.2-10], [MQTT-3.14.4-3]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_flag indicating value '1'B,
      payload containing
        will_topic corresponding to PX_PUBLISH_TOPIC,
        will_message corresponding to PX_WILL_MESSAGE;
      ;;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a DISCONNECT message from the CLIENT_1 entity
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_LWT_003

    Test objective
    "The Will Message MUST be published when the Network Connection is subsequently closed unless the Will Message has been deleted by the Server on receipt of a DISCONNECT Packet"
    Reference
    "[MQTT-3.1.2-12]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_flag indicating value '0'B;
      ;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
      when {
        the CLIENT_1 entity closes the TCP_CONNECTION to the IUT entity
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_LWT_004

    Test objective
    "If Will Retain is set to 1, the Server MUST publish the Will Message as a retained message"
    Reference
    "[MQTT-3.1.2-17]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_retain indicating value '1'B,
        will_flag indicating value '1'B,
      payload containing
        will_topic corresponding to PX_PUBLISH_TOPIC,
        will_message corresponding to PX_WILL_MESSAGE;
      ;;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity closed the TCP_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
            topic_filter corresponding to PX_PUBLISH_TOPIC;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PX_WILL_MESSAGE;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_Broker_FEAT_LWT_005

    Test objective
    "If Will Retain is set to 0, the Server MUST publish the Will Message as a non-retained message"
    Reference
    "[MQTT-3.1.2-16]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_retain indicating value '0'B,
        will_flag indicating value '1'B,
      payload containing
        will_topic corresponding to PX_PUBLISH_TOPIC,
        will_message corresponding to PX_WILL_MESSAGE;
      ;;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity closed the TCP_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
            topic_filter corresponding to PX_PUBLISH_TOPIC;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  // TODO: what about will_qos? -> implement for FEAT_QOS?

}
