Package mts_tst_mqtt {

  import all from mts_mqtt_commons;

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in CONNECT Control Packet are invalid."

    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
      when {
          the IUT entity receives a CONNECT message containing
          header_flags indicating value '1111'B;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_002

    Test objective
    "Verify that the IUT either disconnects the client or continues processing the CONNECT Control Packet if the protocol name does not correspond to 'MQTT'."

    Reference
    "[MQTT-3.1.2-1], [MQTT-3.1.4-4]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME_INVALID,
            protocol_level indicating value 0x04;
        } then {
            the IUT entity closes the TCP_CONNECTION

            // TODO: missing in TTCN-3 Implementation
            or the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_003

    Test objective
    "Verify that the IUT responds to supported protocol levels (in scope: MQTT-3.1.1) with the return code 0x00."

    Reference
    "[MQTT-3.1.2-2], [MQTT-3.1.4-4]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04;
        } then {
            the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_004

    Test objective
    "Verify that the IUT validates the reserved flags in the CONNECT Control Packet."

    Reference
    "[MQTT-3.1.2-3], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                reserved_field indicating value '1'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_005

    Test objective
    "Verify that the IUT validates the will_topic and will_message fields if the will_flag is set to 1."

    Reference
    "[MQTT-3.1.2-9], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value omit,
                will_message indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_006

    Test objective
    "Verify that the IUT validates the the will_topic and will_message fields to be omitted if the will_flag is set to 0."

    Reference
    "[MQTT-3.1.2-11], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_LWT and PICS_BROKER_RTND

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '0'B,
                will_qos corresponding to AT_LEAST_ONCE,
                will_retain indicating value '1'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic corresponding to PX_WILL_TOPIC,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_007

    Test objective
    "Verify that the IUT validates the will_qos field to be set to 0 if the will_flag is set to 0."

    Reference
    "[MQTT-3.1.2-13], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '0'B,
                will_qos corresponding to AT_LEAST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_008

    Test objective
    "Verify that the IUT validates the will_qos field and rejects connections with an invalid will_qos value."

    Reference
    "[MQTT-3.1.2-14], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to INVALID_QOS,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_009

    Test objective
    "Verify that the IUT validates the will_qos field if the will_flag is set to 1."

    Reference
    "[MQTT-3.1.2-14], [MQTT-3.1.4-4]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_010

    Test objective
    "Verify that the IUT validates the will_flag and will_retain flags to be set correctly."

    Reference
    "[MQTT-3.1.2-15], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '1'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value omit,
                will_message indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_011

    Test objective
    "Verify that the IUT validates the will_retain flag to be set to 0 if the will_flag is set to 0."

    Reference
    "[MQTT-3.1.2-15], [MQTT-3.1.4-4]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value omit,
                will_message indicating value omit;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_012

    Test objective
    "Verify that the IUT validates the password flag to be set to 0 if the user_name_flag is set to 0."

    Reference
    "[MQTT-3.1.2-22], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '0'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_013

    Test objective
    "Verify that the IUT validates the username field to be omitted if the user_name_flag is set to 0."

    Reference
    "[MQTT-3.1.2-18], [MQTT-3.1.2-22], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name corresponding to PX_MQTT_USER_NAME,
                password indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_014

    Test objective
    "Verify that the IUT validates a payload is present if the user_name_flag is set to 1."

    Reference
    "[MQTT-3.1.2-19], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '1'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name indicating value omit,
                password indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_015

    Test objective
    "Verify that the IUT validates the password field to be omitted if the password_flag is set to 0."

    Reference
    "[MQTT-3.1.2-20], [MQTT-3.1.2-22], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name indicating value omit,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_016

    Test objective
    "Verify that the IUT validates the password field to be present if the password_flag is set to 1."

    Reference
    "[MQTT-3.1.2-21], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name corresponding to PX_MQTT_USER_NAME,
                password indicating value omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_017

    Test objective
    "Verify that the IUT validates the client_identifier to be between 1 and 23 UTF-8 encoded bytes in length."

    Reference
    "[MQTT-3.1.3-5], [MQTT-3.1.4-1]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '1'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_24_BYTES;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_018

    Test objective
    "Verify that the IUT validates the client_identifier to contain only alphanumeric characters [0-9a-zA-Z]."

    Reference
    "[MQTT-3.1.3-5], [MQTT-3.1.4-1]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '1'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_NON_ALPHA_NUM;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_019

    Test objective
    "Verify that the IUT accepts client_identifiers of zero byte length."

    Reference
    "[MQTT-3.1.3-6], [MQTT-3.1.3-7], [MQTT-3.1.4-4]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '1'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_ZERO_BYTES;
            ;
        } then {
            // TODO: Standards says: MAY allow
            the IUT entity sends a CONNACK message containing
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_020

    Test objective
    "Verify that the IUT validates the client_identifier to be a well-formed UTF-8 encoded string."

    Reference
    "[MQTT-1.5.3-1], [MQTT-3.1.3-4], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_D800;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_021

    Test objective
    "Verify that the IUT validates the client_identifier to be a well-formed UTF-8 encoded string."

    Reference
    "[MQTT-1.5.3-2], [MQTT-3.1.3-4], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_0000;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_022

    Test objective
    "Verify that the IUT validates the will_topic to be a well-formed UTF-8 encoded string."

    Reference
    "[MQTT-1.5.3-1], [MQTT-3.1.3-10], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value WILL_TOPIC_D800,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_023

    Test objective
    "Verify that the IUT validates the will_topic to be a well-formed UTF-8 encoded string."

    Reference
    "[MQTT-1.5.3-2], [MQTT-3.1.3-10], [MQTT-3.1.4-1], [MQTT-3.2.2-6], [MQTT-4.7.3-2]"

    PICS Selection PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value WILL_TOPIC_0000,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_024

    Test objective
    "Verify that the IUT validates the will_topic to not contain single-level topic filters."

    Reference
    "[MQTT-4.7.1-1], [MQTT-3.1.4-1]"

    PICS Selection PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value TOPIC_FILTER_SINGLE_LEVEL,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_025

    Test objective
    "Verify that the IUT validates the will_topic to not contain multi-level topic filters."

    Reference
    "[MQTT-4.7.1-1], [MQTT-3.1.4-1]"

    PICS Selection PICS_BROKER_LWT

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic indicating value TOPIC_FILTER_MULTI_LEVEL,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_026

    Test objective
    "Verify that the IUT validates the user_name to be a well-formed UTF-8 encoded string."

    Reference
    "[MQTT-1.5.3-1], [MQTT-3.1.3-11], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name corresponding to MQTT_USER_NAME_INVALID_UTF8,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  // TODO: differentiate MQTT_USER_NAME_INVALID_UTF8 to distinguish from CONNECT_025
  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_027

    Test objective
    "Verify that the IUT validates the user_name to be a well-formed UTF-8 encoded string."

    Reference
    "[MQTT-1.5.3-2], [MQTT-3.1.3-11], [MQTT-3.1.4-1], [MQTT-3.2.2-6]"

    PICS Selection PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                user_name corresponding to MQTT_USER_NAME_INVALID_UTF8,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_028

    Test objective
    "Verify that the IUT validates the first MQTT Control Packet sent from the client to the server after a TCP connection is a MQTT CONNECT."

    Reference
    "[MQTT-3.1.0-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a TCP_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message
      } then {
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_029

    Test objective
    "Verify that the IUT detects multiple MQTT CONNECT Control Packets sent from a client within a single session as a protocol violation."

    Reference
    "[MQTT-3.1.0-2]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a CONNECT message
      } then {
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_030

    Test objective
    "Verify that the IUT detects multiple clients with the same client_identifier and disconnects the existing client."

    Reference
    "[MQTT-3.1.4-2]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      payload containing
        client_identifier corresponding to PX_CLIENT_ID;
      ;
      to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a CONNECT message containing
        payload containing
            client_identifier corresponding to PX_CLIENT_ID;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity closes the TCP_CONNECT to the CLIENT_1 entity
        and
        the IUT entity sends a CONNACK message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_031

    Test objective
    "Verify that the IUT validates all topic names to be at least one character long."

    Reference
    "[MQTT-4.7.3-1]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                will_flag indicating value '1'B,
                will_qos corresponding to AT_LEAST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                will_topic corresponding to TOPIC_NAME_ZERO_CHARS,
                will_message corresponding to PX_WILL_MESSAGE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNECT_032

    Test objective
    "Verify that the IUT does not process any data sent by the client after a rejected CONNECT Control Packet."

    Reference
    "[MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_AUTH

    Initial conditions
    with {
      the IUT entity received a CONNECT message containing
        connect_flags containing
            user_name_flag indicating value '1'B,
            password_flag indicating value '1'B,
        payload containing
            user_name corresponding to MQTT_USER_NAME_INVALID,
            password corresponding to MQTT_PASSWORD_INVALID;;;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a SUBSCRIBE message
      } then {
        the IUT entity sends a CONNACK message containing
          connect_return_code indicating value 0x05;
        and
        the IUT entity sends no SUBACK message
        and
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_001

    Test objective
    "Verify that the IUT replies with a CONNACK Control Packet with valid header flags."

    Reference
    "[MQTT-2.2.2-1], [MQTT-3.1.4-4], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_002

    Test objective
    "Verify that the IUT responds to a CONNECT Control Packet with clean_session set to 1 with a CONNACK Control Packet with session_present_flag set to 0."

    Reference
    "[MQTT-3.2.2-1], [MQTT-3.1.4-4], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '1'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to VALID_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x00;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_003

    Test objective
    "Verify that the IUT responds to a CONNECT Control Packet for a present session with a CONNACK Control Packet with session_present_flag set to 1."

    Reference
    "[MQTT-3.2.2-2], [MQTT-3.1.4-4], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
        the IUT entity having a present session for the CLIENT_ID entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '1'B,
            connect_return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_004

    Test objective
    "Verify that the IUT responds to a CONNECT Control Packet with clean_session set to 1
    but not having a present session for this client_identifier with a CONNACK Control Packet with session_present_flag set to 0."

    Reference
    "[MQTT-3.2.2-3], [MQTT-3.1.4-4], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_RTND

    Initial conditions
    with {
        the IUT entity having no present session for the CLIENT_ID entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_005

    Test objective
    "Verify that the IUT responds to protocol levels which it does not support with return code 0x01."

    Reference
    "[MQTT-3.1.2-2], [MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0xFF,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x01;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_006

    Test objective
    "Verify that the IUT responds to CONNECT Control Packets with a zero-byte client_identifier and clean_session set to 0
    with CONNACK with connect_return_code set to 0x02 and close the network connection."

    Reference
    "[MQTT-3.1.3-8], [MQTT-3.1.3-9], [MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_RTND

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to CLIENT_ID_ZERO_BYTES;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x02;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_007

    Test objective
    "Verify that the IUT responds to a CONNECT Control Packet with a malformed user_name with CONNACK with connect_return_code set to 0x04."

    Reference
    "[MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID,
                user_name corresponding to MQTT_USER_NAME_INVALID_UTF8,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x04;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

    Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_008

    Test objective
    "Verify that the IUT responds to a CONNECT Control Packet with a invalid user_name with CONNACK with connect_return_code set to 0x05."

    Reference
    "[MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID,
                user_name corresponding to MQTT_USER_NAME_INVALID,
                password corresponding to PX_MQTT_PASSWORD;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x05;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_009

    Test objective
    "Verify that the IUT responds to a CONNECT Control Packet with a invalid password with CONNACK with connect_return_code set to 0x05."

    Reference
    "[MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_AUTH

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '1'B,
                password_flag indicating value '1'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID,
                user_name corresponding to PX_MQTT_USER_NAME,
                password corresponding to MQTT_PASSWORD_INVALID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x05;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  // TODO: possible to implement? TTCN-3 implementation returns always inconclusive here!
  // What is meant by unavailable and how should an unavailable MQTT service return a CONNACK?
  Test Purpose {
    TP Id TP_MQTT_BROKER_CONNACK_010

    Test objective
    "Verify that the IUT responds with CONNECT with connect_return_code set to 0x03 if the MQTT service is unavailable."

    Reference
    "[MQTT-3.2.2-4], [MQTT-3.2.2-5], [MQTT-3.2.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the IUT entity having no available service for the MQTT_CONNECTION entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a CONNECT message containing
            header_flags indicating value '0000'B,
            protocol_name corresponding to PROTOCOL_NAME,
            protocol_level indicating value 0x04,
            connect_flags containing
                clean_session indicating value '0'B,
                user_name_flag indicating value '0'B,
                password_flag indicating value '0'B,
                will_flag indicating value '0'B,
                will_qos corresponding to AT_MOST_ONCE,
                will_retain indicating value '0'B,
                reserved_field indicating value '0'B;
            ,
            payload containing
                client_identifier corresponding to PX_CLIENT_ID;
            ;
        } then {
            the IUT entity sends a CONNACK message containing
            header_flags indicating value '0000'B,
            session_present_flag indicating value '0'B,
            connect_return_code indicating value 0x03;

            and the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_001

    Test objective
    "Verify that the IUT accepts only QoS 0 PUBLISH Control Packets with the dup_flag set to 0."

    Reference
    "[MQTT-3.3.1-2]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          dup_flag indicating value '1'B,
          qos_level corresponding to AT_MOST_ONCE;
        ;
      } then {
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_002

    Test objective
    "Verify that the IUT accepts only PUBLISH Control Packets with a valid QoS level."

    Reference
    "[MQTT-2.2.2-1], [MQTT-3.3.1-4]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to INVALID_QOS;
        ;
      } then {
        the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_003

    Test objective
    "Verify that the IUT validates the topic_name in a PUBLISH Control Packet to be a well-formed UTF-8 encoded string."

    Reference
    "[MQTT-3.3.2-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_INVALID_UTF8;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_004

    Test objective
    "Verify that the IUT validates the topic_name in a PUBLISH Control Packet to not contain multi-level wildcard characters."

    Reference
    "[MQTT-3.3.2-2], [MQTT-4.7.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_WC_MULTI_LVL;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_005

    Test objective
    "Verify that the IUT validates the topic_name in a PUBLISH Control Packet to not contain single-level wildcard characters."

    Reference
    "[MQTT-3.3.2-2], [MQTT-4.7.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_WC_SINGLE_LVL;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_006

    Test objective
    "Verify that the IUT validates the topic_name in a PUBLISH Control Packet to be at least on character long."

    Reference
    "[MQTT-4.7.3-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_ZERO_CHARS;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_007

    Test objective
    "Verify that the IUT validates the topic_name in a PUBLISH Control Packet to not contain the null character (Unicode U+0000)."

    Reference
    "[MQTT-4.7.3-2], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_0000;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_008

    Test objective
    "Verify that the IUT rejects QoS 0 PUBLISH Control Packets with the dup_flag set to 1."

    Reference
    "[MQTT-4.3.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          dup_flag indicating value '1'B,
          qos_level corresponding to AT_MOST_ONCE;
        ;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  // TODO: does it make sense to test this conformance statement here?
  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_009

    Test objective
    "Verify that the IUT validates a QoS 0 PUBLISH Control Packet to not contain a packet_identifier."

    Reference
    "[MQTT-2.3.1-5], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_MOST_ONCE,
        packet_identifier corresponding to PACKET_ID;
        ;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_010

    Test objective
    "Verify that the IUT validates a QoS 1 PUBLISH Control Packet to contain a non-zero 16-bit Packet Identifier."

    Reference
    "[MQTT-2.3.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE,
        packet_identifier corresponding to PACKET_ID_ZERO;
        ;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_011

    Test objective
    "Verify that the IUT validates a QoS 2 PUBLISH Control Packet to contain a non-zero 16-bit Packet Identifier."

    Reference
    "[MQTT-2.3.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to EXACTLY_ONCE,
        packet_identifier corresponding to PACKET_ID_ZERO;
        ;
      } then {
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBLISH_012

    Test objective
    "Verify that the IUT handles not authorized PUBLISH Control Packets with either a positive PUBACK Control Packet or by closing the network connection."

    Reference
    "[MQTT-3.3.5-2]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
      the TEST_SYSTEM entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to TOPIC_NAME_RESTRICTED;
        ;
      } then {
          the IUT entity sends a PUBACK message
          or
          the IUT entity closes the TCP_CONNECTION
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBACK_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in PUBACK Control Packet are invalid."

    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to AT_LEAST_ONCE;
        and
        the CLIENT_1 entity delivered a PUBLISH message containing
            qos_level corresponding to AT_LEAST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC;
        to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity sends a PUBLISH message containing
      header containing
        qos_level corresponding to AT_LEAST_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC;
      ;
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBACK message containing
      header_flags indicating value '1111'B;
      from the CLIENT_2 entity
      } then {
          the IUT entity closes the TCP_CONNECTION to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBACK_002

    Test objective
    "Verify that the IUT sends PUBACK Control Packets in the order in which the corresponding QoS 1 PUBLISH Control Packets were received."

    Reference
    "[MQTT-4.6.0-2], [MQTT-3.3.4-1], [MQTT-4.6.0-6], [MQTT-2.3.1-6]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
      the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_1;
        ;
        and
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_2;
        ;
      } then {
        the IUT entity sends a PUBACK message containing
          packet_identifier corresponding to PACKET_ID_1;
        and
        the IUT entity sends a PUBACK message containing
          packet_identifier corresponding to PACKET_ID_2;
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBREC_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in PUBREC Control Packet are invalid."

    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to EXACTLY_ONCE;
        and
        the CLIENT_1 entity delivered a PUBLISH message containing
            qos_level corresponding to EXACTLY_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC;
        to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity sends a PUBLISH message containing
      header containing
        qos_level corresponding to EXACTLY_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC;
      ;
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBREC message containing
      header_flags indicating value '1111'B;
      from the CLIENT_2 entity
      } then {
          the IUT entity closes the TCP_CONNECTION to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBREC_002

    Test objective
    "Verify that the IUT sends PUBREC Control Packets in the order in which the corresponding QoS 2 PUBLISH Control Packets were received."

    Reference
    "[MQTT-4.6.0-3], [MQTT-3.3.4-1], [MQTT-4.6.0-6], [MQTT-2.3.1-6]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
      the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to EXACTLY_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_1;
        ;
        and
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to EXACTLY_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_2;
        ;
      } then {
        the IUT entity sends a PUBREC message containing
          packet_identifier corresponding to PACKET_ID_1;
        and
        the IUT entity sends a PUBREC message containing
          packet_identifier corresponding to PACKET_ID_2;
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBREL_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in PUBREL Control Packet are invalid."

    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.6.1-1]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity receives a PUBLISH message containing
      header containing
        qos_level corresponding to EXACTLY_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC;;
      from the CLIENT_1 entity
      and
      the IUT entity sends a PUBREC message
      from the CLIENT_1 entity
      and
      the IUT entity receives a PUBREL message containing
      header_flags indicating value '1101'B;
      from the CLIENT_1 entity
      } then {
          the IUT entity closes the TCP_CONNECTION to the CLIENT_1 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBREL_002

    Test objective
    "Verify that the IUT sends PUBREL Control Packets in the order in which the corresponding PUBREC Control Packets were received."

    Reference
    "[MQTT-4.6.0-4], [MQTT-4.6.0-6], [MQTT-2.3.1-6]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to EXACTLY_ONCE;
        and
        the CLIENT_1 entity delivered a PUBLISH message containing
            qos_level corresponding to EXACTLY_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_1;
        to the IUT entity
        and
        the CLIENT_1 entity delivered a PUBLISH message containing
            qos_level corresponding to EXACTLY_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_2;
        to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity sends a PUBLISH message containing
      header containing
        qos_level corresponding to EXACTLY_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC,
      packet_identifier corresponding to PACKET_ID_1;;
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBREC message containing
      packet_identifier corresponding to PACKET_ID_1;
      from the CLIENT_2 entity
      and
      the IUT entity sends a PUBLISH message containing
      header containing
        qos_level corresponding to EXACTLY_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC,
      packet_identifier corresponding to PACKET_ID_2;;
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBREC message containing
      packet_identifier corresponding to PACKET_ID_2;
      from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBREL message containing
          packet_identifier corresponding to PACKET_ID_1;
        and
        the IUT entity sends a PUBREL message containing
          packet_identifier corresponding to PACKET_ID_2;
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_PUBCOMP_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in PUBCOMP Control Packet are invalid."

    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to EXACTLY_ONCE;
        and
        the CLIENT_1 entity delivered a PUBLISH message containing
            qos_level corresponding to EXACTLY_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC;
        to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity sends a PUBLISH message containing
      header containing
        qos_level corresponding to EXACTLY_ONCE,
      topic_name corresponding to PX_PUBLISH_TOPIC;;
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBREC message
      from the CLIENT_2 entity
      and
      the IUT entity sends a PUBREL message
      to the CLIENT_2 entity
      and
      the IUT entity receives a PUBCOMP message containing
      header_flags indicating value '1111'B;
      from the CLIENT_2 entity
      } then {
          the IUT entity closes the TCP_CONNECTION to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in SUBSCRIBE Control Packet are invalid."

    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.8.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '1101'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_002

    Test objective
    "Verify that the IUT validates a SUBSCRIBE Control Packet to contain a non-zero 16-bit Packet Identifier."

    Reference
    "[MQTT-2.3.1-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID_ZERO,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_003

    Test objective
    "Verify that the IUT validates the topic_filter in a SUBSCRIBE Control Packet to be a well-formed UTF-8 encoded string and do not contain code points between U+D800 and U+DFFF."

    Reference
    "[MQTT-1.5.3-1], [MQTT-3.8.3-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_D800,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_004

    Test objective
    "Verify that the IUT validates the topic_filter in a SUBSCRIBE Control Packet to be a well-formed UTF-8 encoded string and do not contain the null character (Unicode U+0000)."

    Reference
    "[MQTT-1.5.3-2], [MQTT-3.8.3-1], [MQTT-4.7.3-2], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_0000,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_005

    Test objective
    "Verify that the IUT validates the topic_filter in a SUBSCRIBE Control Packet to be at least on character long."

    Reference
    "[MQTT-4.7.3-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_ZERO_CHARS,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_006

    Test objective
    "Verify that the IUT validates a SUBSCRIBE Control Packet to contain at least one topic filter/QoS pair."

    Reference
    "[MQTT-3.8.3-3], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_007

    Test objective
    "Verify that the IUT validates in a SUBSCRIBE Control Packet the upper 6 bits of a requested QoS byte (reserved bits) to be set to 0."

    Reference
    "[MQTT-3.8.3-4], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_MOST_ONCE,
                requested_qos_flags indicating value '111111'B;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_008

    Test objective
    "Verify that the IUT validates the requested_qos field to be a valid QoS level."

    Reference
    "[MQTT-3.8.3-4], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to INVALID_QOS;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_009

    Test objective
    "Verify that the IUT validates topic_filter field to be a valid multi-level Topic Fiilter."

    Reference
    "[MQTT-4.7.1-2], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_MULTI_LEVEL_INVALID,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_010

    Test objective
    "Verify that the IUT validates topic_filter field to be a valid single-level Topic Fiilter."

    Reference
    "[MQTT-4.7.1-3], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_SINGLE_LEVEL_INVALID,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBSCRIBE_011

    Test objective
    "Verify that the IUT allows topic_filter field to include the 'zero width no-break space character'"

    Reference
    "[MQTT-1.5.3-3]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_WITH_ZWNBS,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
          the IUT entity sends a SUBACK message containing
              packet_identifier corresponding to PACKET_ID;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBACK_001

    Test objective
    "Verify that the IUT replies with a SUBACK Control Packet with valid header flags."

    Reference
    "[MQTT-2.2.2-1], [MQTT-3.8.1-1] "

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBACK_002

    Test objective
    "Verify that the IUT replies with a SUBACK Control Packet containing a
    packet identifier corresponding to the SUBSCRIBE Control Packet."

    Reference
    "[MQTT-2.3.1-1], [MQTT-2.3.1-7], [MQTT-3.8.4-1], [MQTT-3.8.4-2]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBACK_003

    Test objective
    "Verify that the IUT replies with a SUBACK Control Packet with a valid maximum QoS level."

    Reference
    "[MQTT-3.9.3-1], [MQTT-3.9.3-2]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBACK_004

    Test objective
    "Verify that the IUT replies with a SUBACK Control Packet with a valid maximum QoS level."

    Reference
    "[MQTT-3.9.3-1], [MQTT-3.9.3-2]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_QOS_1

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_LEAST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x01;
            or
            the IUT entity sends a SUBACK message containing  // Note: if the IUT supports only QoS 0
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x00;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBACK_005

    Test objective
    "Verify that the IUT replies with a SUBACK Control Packet with a valid maximum QoS level."

    Reference
    "[MQTT-3.9.3-1], [MQTT-3.9.3-2]"

    PICS Selection PICS_BROKER_BASIC and PICS_BROKER_QOS_1 and PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to EXACTLY_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x02;
            or
            the IUT entity sends a SUBACK message containing  // Note: if the IUT supports only up to QoS 1
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x01;
            or
            the IUT entity sends a SUBACK message containing // Note: if the IUT supports only QoS 0
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x00;
        }
    }
  }


  // TODO: Specification not clear: not explicitly stating what "failed subscription" is.
  // TODO: check if QoS 2 necessary in SUBSCRIBE's requested_qos
  // see: https://github.com/erlio/vernemq/issues/72
  // see: https://groups.google.com/forum/#!topic/mqtt/ppdmL4-v2Yk
  Test Purpose {
    TP Id TP_MQTT_BROKER_SUBACK_006

    Test objective
    "Verify that the IUT replies to a failed subscription with a SUBACK Control Packet with the return code 0x80."

    Reference
    "[MQTT-3.9.3-1], [MQTT-3.9.3-2]"

    PICS Selection PICS_BROKER_BASIC or PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_INVALID,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID,
            return_code indicating value 0x80;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBSCRIBE_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in UNSUBSCRIBE Control Packet are invalid."

    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-3.10.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '1101'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  // TODO: response/behavior not explicitly described in the specification
  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBSCRIBE_002

    Test objective
    "Verify that the IUT validates a UNSUBSCRIBE Control Packet to contain a non-zero 16-bit Packet Identifier."

    Reference
    "[MQTT-2.3.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID_ZERO;
        } then {
            the IUT entity closes the TCP_CONNECTION
            or
            the IUT entity sends a UNSUBACK message containing
            packet_identifier corresponding to PACKET_ID_ZERO;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBSCRIBE_003

    Test objective
    "Verify that the IUT validates the topic_filter in a UNSUBSCRIBE Control Packet
    to be a well-formed UTF-8 encoded string and do not contain code points between U+D800 and U+DFFF."

    Reference
    "[MQTT-1.5.3-1], [MQTT-3.10.3-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_D800;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBSCRIBE_004

    Test objective
    "Verify that the IUT validates all topic filters to be at least one character long."

    Reference
    "[MQTT-4.7.3-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_ZERO_CHARS;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBSCRIBE_005

    Test objective
    "Verify that the IUT validates the topic filter in a UNSUBSCRIBE Control Packet not to contain the null character (Unicode U+0000)."

    Reference
    "[MQTT-4.7.3-2], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to TOPIC_FILTER_0000;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBSCRIBE_006

    Test objective
    "Verify that the IUT validates a UNSUBSCRIBE Control Packet to contain at least on topic filter."

    Reference
    "[MQTT-3.10.3-2], [MQTT-4.8.0-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
                omit;
            ;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBACK_001

    Test objective
    "Verify that the IUT replies with an UNSUBACK Control Packet with valid header flags."

    Reference
    "[MQTT-2.2.2-1], [MQTT-3.10.1-1] "

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B;
        } then {
            the IUT entity sends a UNSUBACK message containing
            header_flags indicating value '0000'B;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBACK_002

    Test objective
    "Verify that the IUT replies with a UNSUBACK Control Packet containing a
    packet identifier corresponding to the UNSUBSCRIBE Control Packet."

    Reference
    "[MQTT-3.10.4-4], [MQTT-2.3.1-7]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT entity subscribed the PX_PUBLISH_TOPIC containing
              qos_level corresponding to AT_MOST_ONCE;
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
              topic_filter corresponding to PX_PUBLISH_TOPIC;
            ;
        } then {
            the IUT entity sends a UNSUBACK message containing
            header_flags indicating value '0000'B,
            packet_identifier corresponding to PACKET_ID;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBACK_003

    Test objective
    "Verify that the IUT replies with an UNSUBACK Control Packet even if no topic subscriptions are deleted."

    Reference
    "[MQTT-3.10.4-5]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT entity not subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
              topic_filter corresponding to PX_PUBLISH_TOPIC;
            ;
        } then {
            the IUT entity sends a UNSUBACK message containing
            header_flags indicating value '0000'B;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_UNSUBACK_004

    Test objective
    "Verify that the IUT replies to UNSUBSCRIBE Control Packets with multiple topic filters
    with one single UNSUBACK Control Packet."

    Reference
    "[MQTT-3.10.4-6]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a UNSUBSCRIBE message containing
            header_flags indicating value '0010'B,
            packet_identifier corresponding to PACKET_ID,
            payload containing
              topic_filter corresponding to PX_PUBLISH_TOPIC,
              topic_filter corresponding to TOPIC_FILTER_VALID; // second topic filter
            ;
        } then {
            the IUT entity sends a UNSUBACK message
            and
            the IUT entity sends no second UNSUBACK message
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_PINGREQ_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in PINGREQ Control Packet are invalid."

    Reference
    "[MQTT-2.2.2-1], [MQTT-2.2.2-2], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a PINGREQ message containing
            header_flags indicating value '1111'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_PINGRESP_001

    Test objective
    "Verify that the IUT replies with a PINGRESP Control Packet with valid header flags."

    Reference
    "[MQTT-2.2.2-1], [MQTT-3.12.4-1] "

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a PINGREQ message containing
            header_flags indicating value '0000'B;
        } then {
            the IUT entity sends a PINGRESP message containing
            header_flags indicating value '0000'B;
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_DISCONNECT_001

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in DISCONNECT Control Packet are valid."

    Reference
    "[MQTT-2.2.2-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a DISCONNECT message containing
            header_flags indicating value '0000'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_DISCONNECT_002

    Test objective
    "Verify that the IUT closes the network connection if fixed header flags in DISCONNECT Control Packet are valid."

    Reference
    "[MQTT-2.2.2-2], [MQTT-3.14.1-1], [MQTT-4.8.0-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a DISCONNECT message containing
            header_flags indicating value '1111'B;
        } then {
            the IUT entity closes the TCP_CONNECTION
        }
    }
  }

  /* Note: remaining length does not have explicit conformance statements: reference section 2.2.3 within MQTT specification */
  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_REMLEN_001

    Test objective
    "Verify that the IUT forwards PUBLISH Control Packets with Remaining Length fields encoded in one byte."

    Reference
    "MQTT 2.2.3"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
           the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
               qos_level corresponding to AT_MOST_ONCE;
           to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD;
            ;
            from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD;
            ;
            to the CLIENT_2 entity
      }
    }
  }

  /* Note: remaining length does not have explicit conformance statements: reference section 2.2.3 within MQTT specification */
  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_REMLEN_002

    Test objective
    "Verify that the IUT forwards PUBLISH Control Packets with Remaining Length fields encoded in two bytes."

    Reference
    "MQTT 2.2.3"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
           the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
               qos_level corresponding to AT_MOST_ONCE;
           to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_2;
            ;
            from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_2;
            ;
            to the CLIENT_2 entity
      }
    }
  }

  /* Note: remaining length does not have explicit conformance statements: reference section 2.2.3 within MQTT specification */
  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_REMLEN_003

    Test objective
    "Verify that the IUT forwards PUBLISH Control Packets with Remaining Length fields encoded in three bytes."

    Reference
    "MQTT 2.2.3"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
           the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
               qos_level corresponding to AT_MOST_ONCE;
           to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_3;
            ;
            from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_3;
            ;
            to the CLIENT_2 entity
      }
    }
  }

  /* Note: remaining length does not have explicit conformance statements: reference section 2.2.3 within MQTT specification */
  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_REMLEN_004

    Test objective
    "Verify that the IUT forwards PUBLISH Control Packets with Remaining Length fields encoded in four bytes."

    Reference
    "MQTT 2.2.3"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
           the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
           and
           the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
               qos_level corresponding to AT_MOST_ONCE;
           to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_4;
            ;
            from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier indicating value omit,
            payload corresponding to PAYLOAD_REM_LEN_4;
            ;
            to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_KEEPALIVE_001

    Test objective
    "Verify that the IUT disconnects a client if it does not receive a Control Packet
    from it within one and a half times of the given Keep Alive time period."

    Reference
    "[MQTT-3.1.2-24]"

    PICS Selection PICS_CLIENT_BASIC

    Initial conditions
    with {
       the CLIENT entity having a MQTT_CONNECTION to the IUT entity
       and
       the CLIENT entity established the MQTT_CONNECTION containing
       keep_alive corresponding to PX_KEEP_ALIVE;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity times_out
      } then {
        the IUT entity closes the TCP_CONNECTION to the CLIENT entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_RTND_001

    Test objective
    "Verify that the IUT does not delete Retained Messages when a session with the corresponding client ends."

    Reference
    "[MQTT-3.1.2-7]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
        the IUT entity having a UTF8_MESSAGE_VALID in the RETAIN_TOPIC entity
        and
        the CLIENT entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT entity having a CLEAN_SESSION
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            packet_identifier corresponding to PACKET_ID,
            payload containing
                topic_filter corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
        } then {
            the IUT entity sends a SUBACK message containing
            return_code indicating value 0x00;

            and the IUT entity sends a PUBLISH message containing
            topic_name corresponding to PX_SUBSCRIBE_TOPIC_FILTER,
            payload corresponding to UTF8_MESSAGE_VALID;
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_RTND_002

    Test objective
    "Verify that the IUT stores Retained Messages for future deliveries."

    Reference
    "[MQTT-3.3.1-5], [MQTT-3.3.1-6], [MQTT-3.3.1-8]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
           the CLIENT_1 entity published a Message containing
               dup_flag indicating value '0'B,
               qos_level corresponding to AT_LEAST_ONCE,
               retain_flag indicating value '1'B,
               topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_1,
            payload corresponding to PAYLOAD;
           to the IUT entity
           and
           the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a SUBSCRIBE message containing
            packet_identifier corresponding to PACKET_ID_2,
            payload containing
                topic_filter corresponding to PX_PUBLISH_TOPIC,
                requested_qos corresponding to AT_MOST_ONCE;
            ;
            from the CLIENT_2 entity
        } then {
            the IUT entity sends a SUBACK message containing
            packet_identifier corresponding to PACKET_ID_2,
            payload containing
                return_code indicating value 0x00;
            ;
            to the CLIENT_2 entity
            and
            the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
                retain_flag indicating value '1'B,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_3,
            payload corresponding to PAYLOAD;
            ;
            to the CLIENT_2 entity
        }
    }
  }


  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_RTND_003

    Test objective
    "Verify that the IUT sets the retain_flag to 0 when Retained Messages are delivered
    directly to existing subscriptions."

    Reference
    "[MQTT-3.3.1-9]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to AT_MOST_ONCE;
    }

    Expected behaviour
    ensure that {
        when {
            the IUT entity receives a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_LEAST_ONCE,
                retain_flag indicating value '1'B,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_1,
            payload corresponding to PAYLOAD;
            ;
            from the CLIENT_1 entity
        } then {
            the IUT entity sends a PUBACK message containing
            packet_identifier corresponding to PACKET_ID_1;
            to the CLIENT_1 entity
            and
            the IUT entity sends a PUBLISH message containing
            publish_header containing
                dup_flag indicating value '0'B,
                qos_level corresponding to AT_MOST_ONCE,
                retain_flag indicating value '0'B,
            topic_name corresponding to PX_PUBLISH_TOPIC,
            packet_identifier corresponding to PACKET_ID_2,
            payload corresponding to PAYLOAD;
            ;
            to the CLIENT_2 entity
        }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_RTND_004

    Test objective
    "Verify that the IUT forwards Retained Messages with a zero-bytes payload."

    Reference
    "[MQTT-3.3.1-10]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
            qos_level corresponding to AT_MOST_ONCE;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD_ZERO_BYTE;
        ;
        from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '0'B,
        payload corresponding to PAYLOAD_ZERO_BYTE;
        ;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_RTND_005

    Test objective
    "Verify that the IUT deletes a stored Retained Messages if it receives a new Retained Message with a zero-bytes payload."

    Reference
    "[MQTT-3.3.1-10], [MQTT-3.3.1-11]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD_ZERO_BYTE;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
          topic_filter corresponding to PX_PUBLISH_TOPIC,
          requested_qos corresponding to AT_MOST_ONCE;
        ;
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_RTND_006

    Test objective
    "Verify that the IUT does neither store a Retained Message nor removes or
    replaces any existing Retained Messages if the retained_flag is set to 0."

    Reference
    "[MQTT-3.3.1-12]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '0'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD_2;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
          topic_filter corresponding to PX_PUBLISH_TOPIC,
          requested_qos corresponding to AT_MOST_ONCE;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        payload corresponding to PAYLOAD;
        ;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_RTND_007

    Test objective
    "Verify that the IUT stores Retained Messages with a QoS level of 0 for future deliveries.
    However, the IUT may choose to discard Retained Messages with a QoS level of 0 at any time."

    Reference
    "[MQTT-3.3.1-7]"

    PICS Selection PICS_BROKER_RTND

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_LEAST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PAYLOAD_2;
        ;
        from the CLIENT_1 entity
        and
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
          topic_filter corresponding to PX_PUBLISH_TOPIC,
          requested_qos corresponding to AT_MOST_ONCE;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        publish_header containing
          qos_level corresponding to AT_MOST_ONCE,
          retain_flag indicating value '1'B,
        payload corresponding to PAYLOAD_2;
        ;
        to the CLIENT_2 entity
        or
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_LWT_001

    Test objective
    "Verify that the IUT sends a Will Messages to subscribes if a client with LWT disconnects unexpectedly."

    Reference
    "[MQTT-3.1.2-8]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_flag indicating value '1'B,
      payload containing
        will_topic corresponding to PX_PUBLISH_TOPIC,
        will_message corresponding to PX_WILL_MESSAGE;
      ;;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
      when {
        the CLIENT_1 entity closes the TCP_CONNECTION to the IUT entity
      } then {
        the IUT entity sends a PUBLISH message containing
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PX_WILL_MESSAGE;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_LWT_002

    Test objective
    "Verify that the IUT deletes a Will Messages if the client with LWT disconnects
    correctly with a DISCONNECT Control Packet."

    Reference
    "[MQTT-3.1.2-8], [MQTT-3.1.2-10], [MQTT-3.14.4-3]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_flag indicating value '1'B,
      payload containing
        will_topic corresponding to PX_PUBLISH_TOPIC,
        will_message corresponding to PX_WILL_MESSAGE;
      ;;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a DISCONNECT message from the CLIENT_1 entity
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_LWT_003

    Test objective
    "Verify that the IUT sends no Will Message if a client without LWT disconnects unexpectedly."

    Reference
    "[MQTT-3.1.2-12]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_flag indicating value '0'B;
      ;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
      when {
        the CLIENT_1 entity closes the TCP_CONNECTION to the IUT entity
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_LWT_004

    Test objective
    "Verify that the IUT handles Will Messages with will_retain set to 1 as Retained Will Messages."

    Reference
    "[MQTT-3.1.2-17]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_retain indicating value '1'B,
        will_flag indicating value '1'B,
      payload containing
        will_topic corresponding to PX_PUBLISH_TOPIC,
        will_message corresponding to PX_WILL_MESSAGE;
      ;;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity closed the TCP_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
            topic_filter corresponding to PX_PUBLISH_TOPIC;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        topic_name corresponding to PX_PUBLISH_TOPIC,
        payload corresponding to PX_WILL_MESSAGE;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_LWT_005

    Test objective
    "Verify that the IUT handles Will Messages with will_retain set to 1 as non-retained Will Messages."

    Reference
    "[MQTT-3.1.2-16]"

    PICS Selection PICS_BROKER_LWT

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity established the MQTT_CONNECTION containing
      flags containing
        will_retain indicating value '0'B,
        will_flag indicating value '1'B,
      payload containing
        will_topic corresponding to PX_PUBLISH_TOPIC,
        will_message corresponding to PX_WILL_MESSAGE;
      ;;
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_1 entity closed the TCP_CONNECTION to the IUT entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a SUBSCRIBE message containing
        payload containing
            topic_filter corresponding to PX_PUBLISH_TOPIC;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_PUBSUB_001

    Test objective
    "Verify that the IUT validates the UTF-8 encoded sequence 0xEF 0xBB 0xBF
    as Unicode U+FEFF ('ZERO WIDTH NO-BREAK SPACE') within the topic name of a PUBLISH Control Packet."

    Reference
    "[MQTT-1.5.3-3], [MQTT-4.7.3-4]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity receives a PUBLISH message containing
      publish_header containing
        qos_level corresponding to AT_MOST_ONCE,
      topic_name corresponding to TOPIC_FILTER_WITH_ZWNBS;;
      from the CLIENT_1 entity
      } then {
        the IUT entity sends no PUBLISH to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_PUBSUB_002

    Test objective
    "Verify that the IUT validates the UTF-8 encoded sequence 0xEF 0xBB 0xBF
    as Unicode U+FEFF ('ZERO WIDTH NO-BREAK SPACE') within the topic filter of a SUBSCRIBE Control Packet."

    Reference
    "[MQTT-1.5.3-3], [MQTT-4.7.3-4]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the TOPIC_FILTER_WITH_ZWNBS
    }

    Expected behaviour
    ensure that {
      when {
      the IUT entity receives a SUBSCRIBE message containing
      payload containing
          topic_filter corresponding to PX_PUBLISH_TOPIC,
          requested_qos corresponding to AT_MOST_ONCE;
      ;
      from the CLIENT_1 entity
      } then {
        the IUT entity sends no PUBLISH to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_PUBSUB_003

    Test objective
    "Verify that the IUT does not match topic filters starting with a multi-level wildcard character (#)
    with topic names beginning with a $ character"

    Reference
    "[MQTT-4.7.2-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the TOPIC_FILTER_MULTI_LEVEL_ALL
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_SYS;
        from the CLIENT_1 entity
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_PUBSUB_004

    Test objective
    "Verify that the IUT does not match topic filters starting with a single-level wildcard character (+)
    with topic names beginning with a $ character"

    Reference
    "[MQTT-4.7.2-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the TOPIC_FILTER_SINGLE_LEVEL
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_SYS;
        from the CLIENT_1 entity
      } then {
        the IUT entity sends no PUBLISH message to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_PUBSUB_005

    Test objective
    "Verify that the IUT does match topic names and filters beginning with a $ character."

    Reference
    "[MQTT-4.7.2-1]"

    PICS Selection PICS_BROKER_BASIC

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the TOPIC_FILTER_MULTI_LEVEL_SYS_ALL
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_SYS;
        from the CLIENT_1 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        topic_name corresponding to TOPIC_NAME_SYS;
        to the CLIENT_2 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_PUBSUB_006

    Test objective
    "Verify that the IUT resends PUBLISH Control Packets in the order in which
    the original PUBLISH Control Packets were sent."

    Reference
    "[MQTT-4.6.0-1], [MQTT-4.6.0-6], [MQTT-4.4.0-1]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
        requested_qos corresponding to AT_LEAST_ONCE;
      to the IUT entity
      and
      the CLIENT_1 entity sent a PUBLISH message containing
        publish_header containing
            qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_1;
      ;
      to the IUT entity
      and
      the CLIENT_1 entity sent a PUBLISH message containing
        publish_header containing
            qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_2;
      ;
      to the IUT entity
      and
      the IUT entity sent a PUBLISH message containing
        publish_header containing
            qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_1;
      ;
      to the CLIENT_2 entity
      and
      the IUT entity sent a PUBLISH message containing
        publish_header containing
            qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_2;
      ;
      to the CLIENT_2 entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity received no PUBACK message containing
          packet_identifier corresponding to PACKET_ID_1;
        and
        the IUT entity received no PUBACK message containing
          packet_identifier corresponding to PACKET_ID_2;
      } then {
        the IUT entity sends a PUBLISH message containing
          publish_header containing
              qos_level corresponding to AT_LEAST_ONCE,
          topic_name corresponding to PX_PUBLISH_TOPIC,
          packet_identifier corresponding to PACKET_ID_1;
        ;
        and
        the IUT entity sends a PUBLISH message containing
          publish_header containing
              qos_level corresponding to AT_LEAST_ONCE,
          topic_name corresponding to PX_PUBLISH_TOPIC,
          packet_identifier corresponding to PACKET_ID_2;
        ;
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_PUBSUB_007

    Test objective
    "Verify that the IUT resends PUBLISH Control Packets in the order in which
    the original PUBLISH Control Packets were sent."

    Reference
    "[MQTT-4.6.0-1], [MQTT-4.6.0-6], [MQTT-4.4.0-1]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
      the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
      and
      the CLIENT_2 entity subscribed the PX_PUBLISH_TOPIC containing
        requested_qos corresponding to EXACTLY_ONCE;
      to the IUT entity
      and
      the CLIENT_1 entity sent a PUBLISH message containing
        publish_header containing
            qos_level corresponding to EXACTLY_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_1;
      ;
      to the IUT entity
      and
      the CLIENT_1 entity sent a PUBLISH message containing
        publish_header containing
            qos_level corresponding to EXACTLY_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_2;
      ;
      to the IUT entity
      and
      the IUT entity sent a PUBLISH message containing
        publish_header containing
            qos_level corresponding to EXACTLY_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_1;
      ;
      to the CLIENT_2 entity
      and
      the IUT entity sent a PUBLISH message containing
        publish_header containing
            qos_level corresponding to EXACTLY_ONCE,
        topic_name corresponding to PX_PUBLISH_TOPIC,
        packet_identifier corresponding to PACKET_ID_2;
      ;
      to the CLIENT_2 entity
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity not received a PUBREC message containing
          packet_identifier corresponding to PACKET_ID_1;
        and
        the IUT entity not received a PUBREC message containing
          packet_identifier corresponding to PACKET_ID_2;
      } then {
        the IUT entity sends a PUBLISH message containing
          publish_header containing
              qos_level corresponding to EXACTLY_ONCE,
          topic_name corresponding to PX_PUBLISH_TOPIC,
          packet_identifier corresponding to PACKET_ID_1;
        ;
        and
        the IUT entity sends a PUBLISH message containing
          publish_header containing
              qos_level corresponding to EXACTLY_ONCE,
          topic_name corresponding to PX_PUBLISH_TOPIC,
          packet_identifier corresponding to PACKET_ID_2;
        ;
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_QOS_001

    Test objective
    "Verify that the IUT delivers PUBLISH Control Packets (in case of overlapping topic filter)
    respecting the maximum QoS level of all matching subscriptions."

    Reference
    "[MQTT-3.3.5-1]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID containing
            qos_level corresponding to AT_MOST_ONCE;
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID_OVERLAP containing
            qos_level corresponding to AT_LEAST_ONCE;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_MOST_ONCE,
        topic_name corresponding to TOPIC_NAME_VALID_OVERLAP;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE;
        ;
        to the CLIENT_1 entity
        or
        the IUT entity sends a PUBLISH message containing
        header containing
          qos_level corresponding to AT_MOST_ONCE;
        ;
        to the CLIENT_1 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_QOS_002

    Test objective
    "Verify that the IUT delivers PUBLISH Control Packets (in case of overlapping topic filter)
    respecting the maximum QoS level of all matching subscriptions."

    Reference
    "[MQTT-3.3.5-1]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID containing
            qos_level corresponding to AT_MOST_ONCE;
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID_OVERLAP containing
            qos_level corresponding to EXACTLY_ONCE;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_MOST_ONCE,
        topic_name corresponding to TOPIC_NAME_VALID_OVERLAP;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        header containing
          qos_level corresponding to EXACTLY_ONCE;
        ;
        to the CLIENT_1 entity
        or
        the IUT entity sends a PUBLISH message containing
        header containing
          qos_level corresponding to AT_MOST_ONCE;
        ;
        to the CLIENT_1 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_QOS_003

    Test objective
    "Verify that the IUT delivers PUBLISH Control Packets (in case of overlapping topic filter)
    respecting the maximum QoS level of all matching subscriptions."

    Reference
    "[MQTT-3.3.5-1]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID containing
            qos_level corresponding to AT_LEAST_ONCE;
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID_OVERLAP containing
            qos_level corresponding to EXACTLY_ONCE;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to TOPIC_NAME_VALID_OVERLAP;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        header containing
          qos_level corresponding to EXACTLY_ONCE;
        ;
        to the CLIENT_1 entity
        or
        the IUT entity sends a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE;
        ;
        to the CLIENT_1 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_QOS_004

    Test objective
    "Verify that the IUT delivers PUBLISH Control Packets (in case of overlapping topic filter)
    respecting the maximum QoS level of all matching subscriptions."

    Reference
    "[MQTT-3.3.5-1]"

    PICS Selection PICS_BROKER_QOS_1

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID containing
            qos_level corresponding to AT_LEAST_ONCE;
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID_OVERLAP containing
            qos_level corresponding to AT_MOST_ONCE;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE,
        topic_name corresponding to TOPIC_NAME_VALID_OVERLAP;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        header containing
          qos_level corresponding to AT_MOST_ONCE;
        ;
        to the CLIENT_1 entity
      }
    }
  }

  Test Purpose {
    TP Id TP_MQTT_BROKER_FEAT_QOS_005

    Test objective
    "Verify that the IUT delivers PUBLISH Control Packets (in case of overlapping topic filter)
    respecting the maximum QoS level of all matching subscriptions."

    Reference
    "[MQTT-3.3.5-1]"

    PICS Selection PICS_BROKER_QOS_2

    Initial conditions
    with {
        the CLIENT_1 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_2 entity having a MQTT_CONNECTION to the IUT entity
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID containing
            qos_level corresponding to EXACTLY_ONCE;
        and
        the CLIENT_1 entity subscribed the TOPIC_FILTER_VALID_OVERLAP containing
            qos_level corresponding to AT_LEAST_ONCE;
    }

    Expected behaviour
    ensure that {
      when {
        the IUT entity receives a PUBLISH message containing
        header containing
          qos_level corresponding to EXACTLY_ONCE,
        topic_name corresponding to TOPIC_NAME_VALID_OVERLAP;
        ;
        from the CLIENT_2 entity
      } then {
        the IUT entity sends a PUBLISH message containing
        header containing
          qos_level corresponding to AT_LEAST_ONCE;
        ;
        to the CLIENT_1 entity
      }
    }
  }
}
